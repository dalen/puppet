#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 808)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'71,73,358,-263,55,66,314,67,-249,91,-133,-258,266,155,385,418,359,313',
'414,-260,413,311,314,112,18,115,440,110,111,370,46,314,49,267,61,12',
'-261,53,40,43,369,48,41,10,11,-263,156,56,17,114,-249,42,-133,-258,15',
'16,-138,95,96,98,97,-260,78,312,93,94,71,73,47,376,157,92,39,74,368',
'76,77,75,-261,-137,54,62,64,63,57,58,59,60,50,-172,-172,52,71,73,65',
'378,55,66,-138,67,99,91,-135,288,379,414,289,413,292,291,-173,-173,-178',
'-178,367,112,18,115,255,110,111,-137,46,348,49,90,61,130,353,53,40,43',
'266,48,41,-178,-178,-172,-172,56,17,114,290,42,-135,270,15,16,266,95',
'96,98,97,267,78,373,93,94,-177,-177,47,270,256,92,39,74,387,76,77,267',
'357,-136,54,62,64,63,57,58,59,60,50,-175,-175,52,71,73,65,90,55,66,245',
'67,99,91,303,304,-177,-177,145,146,-176,-176,-175,-175,-174,-174,244',
'112,18,115,122,110,111,-136,46,82,49,177,61,12,395,53,40,43,80,48,41',
'10,11,396,309,56,17,114,310,42,398,174,15,16,266,128,401,98,97,121,78',
'354,93,94,-176,-176,47,123,122,92,39,74,353,76,77,266,406,407,54,62',
'64,63,57,58,59,60,50,353,270,52,71,73,65,172,55,66,267,67,99,128,266',
'258,347,121,124,125,126,127,411,343,301,123,122,270,18,415,417,341,340',
'255,46,267,49,136,61,12,285,53,40,43,426,48,41,10,11,259,255,56,17,282',
'429,42,283,128,15,16,309,121,124,125,126,127,78,255,285,123,147,285',
'47,290,433,82,39,74,136,76,77,436,309,137,54,62,64,63,57,58,59,60,50',
'439,136,52,71,73,65,90,55,66,90,67,459,90,124,125,126,127,443,417,445',
'446,447,448,309,90,122,452,18,453,454,455,122,90,46,118,49,309,61,12',
'82,53,40,43,463,48,41,10,11,464,79,56,17,466,467,42,468,128,15,16,343',
'121,,128,,,78,121,,123,,,47,,,123,39,74,,76,77,,,,54,62,64,63,57,58',
'59,60,50,,,52,71,73,65,,55,66,,67,457,91,124,125,126,127,,,124,125,126',
'127,,,,112,18,115,122,110,111,,46,,49,,61,12,,53,40,43,,48,41,10,11',
',,56,17,114,,42,,,15,16,,128,,98,97,121,78,,93,94,,,47,123,,92,39,74',
',76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,99,91',
',,,,124,125,126,127,,,,122,,112,18,115,122,110,111,,46,,49,,61,130,',
'53,40,43,,48,41,,,,,56,17,114,,42,128,,15,16,121,128,,404,,121,78,,123',
',,,47,123,,92,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73',
'65,,55,66,,67,,124,125,126,127,,124,125,126,127,,,,122,,,18,,,-248,122',
',46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,128,,15,16,121,,',
'128,,,78,121,123,,,,47,-248,,123,39,74,,76,77,,,,54,62,64,63,57,58,59',
'60,50,,,52,71,73,65,,55,66,,67,,124,125,126,127,,,,124,125,126,127,',
'122,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,128',
',15,16,121,,,,,,78,,123,,,,47,83,84,85,39,74,,76,77,,,,54,62,64,63,57',
'58,59,60,50,,,52,71,73,65,,55,66,,67,451,124,125,126,127,,,,,71,73,',
',157,,,18,,86,88,87,89,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17',
',,42,,,15,16,155,,,152,,,78,71,73,,,157,47,,,,39,74,,76,77,,,78,54,62',
'64,63,57,58,59,60,50,156,74,52,71,73,65,,55,66,,67,,91,155,,,152,,,',
'71,73,,,157,,112,18,115,,110,111,,46,,49,78,61,130,,53,40,43,,48,41',
'156,74,,,56,17,114,,42,,,15,16,155,,,152,,,78,71,73,,,157,47,,,92,39',
'74,,76,77,,,78,54,62,64,63,57,58,59,60,50,156,74,52,71,73,65,,55,66',
',67,,91,155,,,152,,,,,,,,,,112,18,115,,110,111,,46,,49,78,61,130,,53',
'40,43,,48,41,156,74,,,56,17,114,,42,,,15,16,,,,,,,78,,93,94,,,47,,,92',
'39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,91,55,66,,67',
',91,,,,,,,,112,,115,,110,111,112,18,115,,110,111,,46,,49,,61,130,,53',
'40,43,,48,41,114,,,,56,17,114,,42,,,15,16,,,93,94,,,78,,,92,,,47,,,',
'39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67',
',91,,,,,,,,,,,,,,112,18,115,,110,111,,46,,49,,61,12,,53,40,43,,48,41',
'10,11,,,56,17,114,,42,,,15,16,,,,,,,78,,93,94,,,47,,,92,39,74,,76,77',
',,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,91,55,66,,67,,91,,,,,,,',
'112,,115,,110,111,112,18,115,,110,111,,46,,49,,61,130,,53,40,43,,48',
'41,114,,,,56,17,114,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,',
'54,62,64,63,57,58,59,60,50,,,52,71,73,65,91,55,66,,67,,,,,,,,,,112,',
'115,,110,111,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,114,,,,56,17,',
',42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59',
'60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12',
',53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74',
',76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,',
',,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15',
'16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,',
'52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40',
'43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,',
',54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,',
',18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,',
',,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73',
'65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41',
',,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64',
'63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46',
',49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47',
',,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,',
'67,165,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,',
',56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63',
'57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,',
'49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,',
'47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66',
',67,,,310,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56',
'17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58',
'59,60,50,,,52,71,73,65,,55,66,,67,280,,,,,,,,,,,,,,,,18,,,,,,46,,49',
',61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47',
',,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,',
'67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56',
'17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58',
'59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61',
'12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39',
'74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,',
',,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,',
'42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59',
'60,50,,,52,71,73,65,,55,66,,67,419,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61',
'130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74',
',76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,',
',,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42',
',,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60',
'50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,',
'53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76',
'77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,161,67,,,,,,,',
',,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,',
',15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50',
',,52,71,73,65,,55,66,163,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53',
'40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76',
'77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,165,,,,,,',
',,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,',
',15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50',
',,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40',
'43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77',
',,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,',
',,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,',
',,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71',
'73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48',
'41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62',
'64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,176,,,,,,,,,,,,,,,,,18,,',
',,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,',
',,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,',
'55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,',
',,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63',
'57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,',
'49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,',
'47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66',
',67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17',
',,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59',
'60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12',
',53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74',
',76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,',
',,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42',
',,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60',
'50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53',
'40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76',
'77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,',
',,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15',
'16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,',
'52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40',
'43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77',
',,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,',
',,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16',
',,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52',
'71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43',
',48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,',
',,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,',
',,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16',
',,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52',
'71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,193,212,203,213,61,205,215',
'206,40,192,,195,190,,,,,56,17,216,211,191,,,15,189,,,,,,,78,,,,,214',
'194,,,,39,74,,76,77,,,,207,208,210,209,198,199,200,201,204,217,,52,71',
'73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48',
'41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62',
'64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,',
',,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,',
',,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55',
'66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56',
'17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58',
'59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61',
'130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74',
',76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,',
',,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15',
'16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,',
'52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40',
'43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,',
',54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,',
',18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,',
',,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73',
'65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41',
',,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64',
'63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46',
',49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47',
',,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,',
'67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17',
',,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59',
'60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130',
',53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76',
'77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,',
',,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16',
',,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52',
'71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43',
',48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54',
'62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18',
',,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78',
',,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65',
',55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,',
',,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63',
'57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,',
'49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47',
',,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,',
'67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17',
',,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59',
'60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130',
',53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76',
'77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,',
',,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16',
',,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52',
'71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43',
',48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,241,39,74,,76,77,,',
',54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,',
',18,243,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16',
',,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52',
'71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43',
',48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54',
'62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18',
',,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78',
',,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65',
',55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,',
',,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63',
'57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,',
'49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47',
',,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,',
'67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17',
',,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59',
'60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12',
',53,40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74',
',76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,',
',,,,,,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15',
'16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,',
'52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40',
'43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77',
',,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,380,,,,,,,,,',
',,,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15',
'16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,',
'52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40',
'43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77',
',,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,,,,',
',,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16,,',
',,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52,71',
'73,65,,55,66,,67,363,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40,43',
',48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77,',
',,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,361,,,,,,,,,,',
',,,,,18,,,,,,46,,49,,61,12,,53,40,43,,48,41,10,11,,,56,17,,,42,,,15',
'16,,,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,',
'52,71,73,65,,55,66,,67,,,,,,,,,,,,,,,,,18,272,,,,,46,,49,,61,12,,53',
'40,43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76',
'77,,,,54,62,64,63,57,58,59,60,50,,,52,71,73,65,,55,66,,67,,,,,,,,,,',
',,,,,,18,,,,,,46,,49,,61,130,,53,40,43,,48,41,,,,,56,17,,,42,,,15,16',
',,,,,,78,,,,,,47,,,,39,74,,76,77,,,,54,62,64,63,57,58,59,60,50,,,52',
'71,73,65,,55,66,,67,351,,,,,,,,,,,,,,,,18,,,,,,46,,49,,61,12,,53,40',
'43,,48,41,10,11,,,56,17,,,42,,,15,16,,,,,,,78,,,,,,47,,,,39,74,,76,77',
',,,54,62,64,63,57,58,59,60,50,,91,52,273,,65,,,,,,,,107,102,112,,115',
',110,111,,103,105,104,106,,,,,,,,,,,,,,,,114,,,,109,108,,,95,96,98,97',
'100,101,,93,94,91,,274,,,92,,,,,,,107,102,112,,115,,110,111,,103,105',
'104,106,,,,,,,,,,99,,,,,,114,,,,109,108,,,95,96,98,97,100,101,,93,94',
'91,,275,,,92,,,,,,,107,102,112,,115,,110,111,,103,105,104,106,,,,,,',
',,,99,,,,,,114,,,,109,108,,,95,96,98,97,100,101,91,93,94,,,,,,92,,,',
'107,102,112,,115,,110,111,,103,105,104,106,,,,,,,,,,,,,99,,,114,,,,109',
'108,,,95,96,98,97,100,101,91,93,94,,,,,,92,,,,107,102,112,344,115,,110',
'111,,103,105,104,106,,,,,,,,,,,,,99,,,114,,,,109,108,,,95,96,98,97,100',
'101,91,93,94,,,315,,,92,,,,107,102,112,,115,,110,111,,103,105,104,106',
',,,,,,,,,,,,99,,,114,,,,109,108,,,95,96,98,97,100,101,91,93,94,,,,,',
'92,,,,107,102,112,,115,,110,111,,103,105,104,106,,,,,,,,,,,,,99,,,114',
',,,109,108,,91,95,96,98,97,100,101,,93,94,,,107,102,112,92,115,,110',
'111,,103,105,104,106,,,,,,,,,,,,,,,,114,,,,99,108,,91,95,96,98,97,100',
'101,,93,94,,,107,102,112,92,115,91,110,111,,103,105,104,106,,,,,,102',
'112,,115,,110,111,,103,,114,,,,99,,,,95,96,98,97,100,101,,93,94,114',
',,,,92,,91,95,96,98,97,100,101,,93,94,,,,102,112,92,115,91,110,111,',
'103,,,,,,99,,,102,112,,115,,110,111,,103,,114,,,,99,,,,95,96,98,97,100',
'101,,93,94,114,,,,,92,,91,95,96,98,97,100,101,,93,94,,,,102,112,92,115',
'91,110,111,,103,,,,,,99,,,,112,,115,,110,111,,,,114,,,,99,91,,,95,96',
'98,97,100,101,,93,94,114,,112,,115,92,110,111,95,96,98,97,100,101,,93',
'94,,,,,,92,,,,,,114,,,,,,99,,95,96,98,97,100,101,91,93,94,,,,,,92,99',
',,107,102,112,,115,,110,111,,103,105,104,106,,,,,,,,,,,,,99,,,114,,',
',109,108,,,95,96,98,97,100,101,91,93,94,,,,,,92,,,,107,102,112,,115',
',110,111,,103,105,104,106,,,,,,,,,,,,,99,,,114,,,,109,108,,,95,96,98',
'97,100,101,,93,94,,,,,,92,91,,,,,,,,,,303,304,107,102,112,,115,,110',
'111,,103,105,104,106,,,,99,,,,,,,,,,,,114,,,,109,108,,,95,96,98,97,100',
'101,91,93,94,,,,,,92,,,,107,102,112,,115,,110,111,,103,105,104,106,',
',,,,,,,,,,,99,,,114,,,,109,108,,,95,96,98,97,100,101,91,93,94,,,,,,92',
',,,107,102,112,,115,,110,111,,103,105,104,106,,,,,,,,,,,,,99,,,114,',
',,109,108,,,95,96,98,97,100,101,91,93,94,,,,,,92,,,,107,102,112,,115',
',110,111,,103,105,104,106,,,,,,,,,,,,,99,,,114,,,,109,108,,,95,96,98',
'97,100,101,91,93,94,,,,,,92,,,,107,102,112,307,115,,110,111,,103,105',
'104,106,,,,,,,,,,,,,99,,,114,,,,109,108,,,95,96,98,97,100,101,91,93',
'94,,,,,,92,,,,107,102,112,,115,,110,111,,103,105,104,106,,,,,,,,,,,',
',99,,,114,,,,109,108,,,95,96,98,97,100,101,91,93,94,,,,,,92,,,,107,102',
'112,,115,,110,111,,103,105,104,106,,,,,,,,,,,,,99,,,114,,,,109,108,',
',95,96,98,97,100,101,,93,94,,331,212,330,213,92,328,215,332,,321,,327',
'329,,,,,,,216,211,333,,,,326,,,,,,,,99,,,,214,334,,,,,,,,,,,,337,338',
'336,335,322,323,324,325,339,217,331,212,330,213,,328,215,332,,321,,327',
'329,,,,,,,216,211,333,,,,326,,,,,,,,,,,,214,334,,,,,,,,,,,,337,338,336',
'335,322,323,324,325,339,217,331,212,330,213,,328,215,332,,321,,327,329',
',,,,,,216,211,333,,,,326,,,,,,,,,,,,214,334,,,,,,,,,,,,337,338,336,335',
'322,323,324,325,339,217,331,212,330,213,,328,215,332,,321,,327,329,',
',,,,,216,211,333,,,,326,,,,,,,,,,,,214,334,,,,,,,,,,,,337,338,336,335',
'322,323,324,325,339,217,331,212,330,213,,328,215,332,,321,,327,329,',
',,,,,216,211,333,,,,326,,,,,,,,,,,,214,334,,,,,,,,,,,,337,338,336,335',
'322,323,324,325,339,217' ]
        racc_action_table = arr = ::Array.new(9544, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,271,208,0,0,364,0,190,229,192,191,268,283,306,364,271,219,361,209',
'361,202,219,229,0,229,410,229,229,279,0,410,0,268,0,0,210,0,0,0,278',
'0,0,0,0,208,283,0,0,229,190,0,192,191,0,0,201,229,229,229,229,209,0',
'202,229,229,172,172,0,284,172,229,0,0,277,0,0,0,210,200,0,0,0,0,0,0',
'0,0,0,192,192,0,454,454,0,286,454,454,201,454,229,228,198,164,287,411',
'164,411,169,169,55,55,60,60,276,228,454,228,119,228,228,200,454,255',
'454,117,454,454,300,454,454,454,255,454,454,201,201,43,43,454,454,228',
'305,454,198,255,454,454,353,228,228,228,228,255,454,281,228,228,200',
'200,454,353,133,228,454,454,308,454,454,353,269,199,454,454,454,454',
'454,454,454,454,454,198,198,454,4,4,454,116,4,4,113,4,228,224,385,385',
'59,59,51,51,58,58,57,57,56,56,112,224,4,224,50,224,224,199,4,81,4,79',
'4,4,316,4,4,4,4,4,4,4,4,318,320,4,4,224,326,4,342,75,4,4,267,50,345',
'224,224,50,4,266,224,224,199,199,4,50,130,224,4,4,349,4,4,174,350,352',
'4,4,4,4,4,4,4,4,4,260,174,4,446,446,4,74,446,446,174,446,224,130,136',
'135,253,130,50,50,50,50,360,250,174,130,49,136,446,362,363,249,247,142',
'446,136,446,243,446,446,242,446,446,446,371,446,446,446,446,136,143',
'446,446,148,384,446,150,49,446,446,386,49,130,130,130,130,446,158,160',
'49,52,162,446,167,394,178,446,446,396,446,446,397,400,45,446,446,446',
'446,446,446,446,446,446,405,44,446,445,445,446,183,445,445,184,445,445',
'185,49,49,49,49,414,415,417,418,421,424,425,186,54,428,445,431,432,438',
'12,8,445,12,445,188,445,445,5,445,445,445,449,445,445,445,445,450,1',
'445,445,456,458,445,460,54,445,445,465,54,,12,,,445,12,,54,,,445,,,12',
'445,445,,445,445,,,,445,445,445,445,445,445,445,445,445,,,445,443,443',
'445,,443,443,,443,443,223,54,54,54,54,,,12,12,12,12,,,,223,443,223,144',
'223,223,,443,,443,,443,443,,443,443,443,,443,443,443,443,,,443,443,223',
',443,,,443,443,,144,,223,223,144,443,,223,223,,,443,144,,223,443,443',
',443,443,,,,443,443,443,443,443,443,443,443,443,,,443,193,193,443,,193',
'193,,193,223,221,,,,,144,144,144,144,,,,347,,221,193,221,203,221,221',
',193,,193,,193,193,,193,193,193,,193,193,,,,,193,193,221,,193,347,,193',
'193,347,203,,347,,203,193,,347,,,,193,203,,221,193,193,,193,193,,,,193',
'193,193,193,193,193,193,193,193,,,193,10,10,193,,10,10,,10,,347,347',
'347,347,,203,203,203,203,,,,205,,,10,,,205,204,,10,,10,,10,10,,10,10',
'10,,10,10,10,10,,,10,10,,,10,205,,10,10,205,,,204,,,10,204,205,,,,10',
'205,,204,10,10,,10,10,,,,10,10,10,10,10,10,10,10,10,,,10,11,11,10,,11',
'11,,11,,205,205,205,205,,,,204,204,204,204,,207,,,11,,,,,,11,,11,,11',
'11,,11,11,11,,11,11,11,11,,,11,11,,,11,207,,11,11,207,,,,,,11,,207,',
',,11,7,7,7,11,11,,11,11,,,,11,11,11,11,11,11,11,11,11,,,11,426,426,11',
',426,426,,426,426,207,207,207,207,,,,,53,53,,,53,,,426,,7,7,7,7,426',
',426,,426,426,,426,426,426,,426,426,426,426,,,426,426,,,426,,,426,426',
'53,,,53,,,426,206,206,,,206,426,,,,426,426,,426,426,,,53,426,426,426',
'426,426,426,426,426,426,53,53,426,15,15,426,,15,15,,15,,222,206,,,206',
',,,373,373,,,373,,222,15,222,,222,222,,15,,15,206,15,15,,15,15,15,,15',
'15,206,206,,,15,15,222,,15,,,15,15,373,,,373,,,15,282,282,,,282,15,',
',222,15,15,,15,15,,,373,15,15,15,15,15,15,15,15,15,373,373,15,16,16',
'15,,16,16,,16,,226,282,,,282,,,,,,,,,,226,16,226,,226,226,,16,,16,282',
'16,16,,16,16,16,,16,16,282,282,,,16,16,226,,16,,,16,16,,,,,,,16,,226',
'226,,,16,,,226,16,16,,16,16,,,,16,16,16,16,16,16,16,16,16,,,16,17,17',
'16,225,17,17,,17,,131,,,,,,,,225,,225,,225,225,131,17,131,,131,131,',
'17,,17,,17,17,,17,17,17,,17,17,225,,,,17,17,131,,17,,,17,17,,,225,225',
',,17,,,225,,,17,,,,17,17,,17,17,,,,17,17,17,17,17,17,17,17,17,,,17,18',
'18,17,,18,18,,18,,227,,,,,,,,,,,,,,227,18,227,,227,227,,18,,18,,18,18',
',18,18,18,,18,18,18,18,,,18,18,227,,18,,,18,18,,,,,,,18,,227,227,,,18',
',,227,18,18,,18,18,,,,18,18,18,18,18,18,18,18,18,,,18,413,413,18,132',
'413,413,,413,,129,,,,,,,,132,,132,,132,132,129,413,129,,129,129,,413',
',413,,413,413,,413,413,413,,413,413,132,,,,413,413,129,,413,,,413,413',
',,,,,,413,,,,,,413,,,,413,413,,413,413,,,,413,413,413,413,413,413,413',
'413,413,,,413,194,194,413,220,194,194,,194,,,,,,,,,,220,,220,,220,220',
',194,,,,,,194,,194,,194,194,,194,194,194,,194,194,220,,,,194,194,,,194',
',,194,194,,,,,,,194,,,,,,194,,,,194,194,,194,194,,,,194,194,194,194',
'194,194,194,194,194,,,194,401,401,194,,401,401,,401,,,,,,,,,,,,,,,,',
'401,,,,,,401,,401,,401,401,,401,401,401,,401,401,401,401,,,401,401,',
',401,,,401,401,,,,,,,401,,,,,,401,,,,401,401,,401,401,,,,401,401,401',
'401,401,401,401,401,401,,,401,46,46,401,,46,46,,46,,,,,,,,,,,,,,,,,46',
',,,,,46,,46,,46,46,,46,46,46,,46,46,,,,,46,46,,,46,,,46,46,,,,,,,46',
',,,,,46,,,,46,46,,46,46,,,,46,46,46,46,46,46,46,46,46,,,46,47,47,46',
',47,47,,47,,,,,,,,,,,,,,,,,47,,,,,,47,,47,,47,47,,47,47,47,,47,47,,',
',,47,47,,,47,,,47,47,,,,,,,47,,,,,,47,,,,47,47,,47,47,,,,47,47,47,47',
'47,47,47,47,47,,,47,48,48,47,,48,48,,48,,,,,,,,,,,,,,,,,48,,,,,,48,',
'48,,48,48,,48,48,48,,48,48,,,,,48,48,,,48,,,48,48,,,,,,,48,,,,,,48,',
',,48,48,,48,48,,,,48,48,48,48,48,48,48,48,48,,,48,395,395,48,,395,395',
',395,,,,,,,,,,,,,,,,,395,,,,,,395,,395,,395,395,,395,395,395,,395,395',
',,,,395,395,,,395,,,395,395,,,,,,,395,,,,,,395,,,,395,395,,395,395,',
',,395,395,395,395,395,395,395,395,395,,,395,195,195,395,,195,195,,195',
',,,,,,,,,,,,,,,,195,,,,,,195,,195,,195,195,,195,195,195,,195,195,,,',
',195,195,,,195,,,195,195,,,,,,,195,,,,,,195,,,,195,195,,195,195,,,,195',
'195,195,195,195,195,195,195,195,,,195,176,176,195,,176,176,,176,176',
',,,,,,,,,,,,,,,176,,,,,,176,,176,,176,176,,176,176,176,,176,176,176',
'176,,,176,176,,,176,,,176,176,,,,,,,176,,,,,,176,,,,176,176,,176,176',
',,,176,176,176,176,176,176,176,176,176,,,176,173,173,176,,173,173,,173',
',,,,,,,,,,,,,,,,173,,,,,,173,,173,,173,173,,173,173,173,,173,173,173',
'173,,,173,173,,,173,,,173,173,,,,,,,173,,,,,,173,,,,173,173,,173,173',
',,,173,173,173,173,173,173,173,173,173,,,173,189,189,173,,189,189,,189',
',,189,,,,,,,,,,,,,,189,,,,,,189,,189,,189,189,,189,189,189,,189,189',
',,,,189,189,,,189,,,189,189,,,,,,,189,,,,,,189,,,,189,189,,189,189,',
',,189,189,189,189,189,189,189,189,189,,,189,147,147,189,,147,147,,147',
'147,,,,,,,,,,,,,,,,147,,,,,,147,,147,,147,147,,147,147,147,,147,147',
'147,147,,,147,147,,,147,,,147,147,,,,,,,147,,,,,,147,,,,147,147,,147',
'147,,,,147,147,147,147,147,147,147,147,147,,,147,376,376,147,,376,376',
',376,,,,,,,,,,,,,,,,,376,,,,,,376,,376,,376,376,,376,376,376,,376,376',
'376,376,,,376,376,,,376,,,376,376,,,,,,,376,,,,,,376,,,,376,376,,376',
'376,,,,376,376,376,376,376,376,376,376,376,,,376,368,368,376,,368,368',
',368,,,,,,,,,,,,,,,,,368,,,,,,368,,368,,368,368,,368,368,368,,368,368',
'368,368,,,368,368,,,368,,,368,368,,,,,,,368,,,,,,368,,,,368,368,,368',
'368,,,,368,368,368,368,368,368,368,368,368,,,368,367,367,368,,367,367',
',367,,,,,,,,,,,,,,,,,367,,,,,,367,,367,,367,367,,367,367,367,,367,367',
'367,367,,,367,367,,,367,,,367,367,,,,,,,367,,,,,,367,,,,367,367,,367',
'367,,,,367,367,367,367,367,367,367,367,367,,,367,365,365,367,,365,365',
',365,365,,,,,,,,,,,,,,,,365,,,,,,365,,365,,365,365,,365,365,365,,365',
'365,,,,,365,365,,,365,,,365,365,,,,,,,365,,,,,,365,,,,365,365,,365,365',
',,,365,365,365,365,365,365,365,365,365,,,365,358,358,365,,358,358,,358',
',,,,,,,,,,,,,,,,358,,,,,,358,,358,,358,358,,358,358,358,,358,358,358',
'358,,,358,358,,,358,,,358,358,,,,,,,358,,,,,,358,,,,358,358,,358,358',
',,,358,358,358,358,358,358,358,358,358,,,358,357,357,358,,357,357,,357',
',,,,,,,,,,,,,,,,357,,,,,,357,,357,,357,357,,357,357,357,,357,357,,,',
',357,357,,,357,,,357,357,,,,,,,357,,,,,,357,,,,357,357,,357,357,,,,357',
'357,357,357,357,357,357,357,357,,,357,65,65,357,,65,65,65,65,,,,,,,',
',,,,,,,,,65,,,,,,65,,65,,65,65,,65,65,65,,65,65,65,65,,,65,65,,,65,',
',65,65,,,,,,,65,,,,,,65,,,,65,65,,65,65,,,,65,65,65,65,65,65,65,65,65',
',,65,66,66,65,,66,66,66,66,,,,,,,,,,,,,,,,,66,,,,,,66,,66,,66,66,,66',
'66,66,,66,66,66,66,,,66,66,,,66,,,66,66,,,,,,,66,,,,,,66,,,,66,66,,66',
'66,,,,66,66,66,66,66,66,66,66,66,,,66,67,67,66,,67,67,,67,67,,,,,,,',
',,,,,,,,67,,,,,,67,,67,,67,67,,67,67,67,,67,67,67,67,,,67,67,,,67,,',
'67,67,,,,,,,67,,,,,,67,,,,67,67,,67,67,,,,67,67,67,67,67,67,67,67,67',
',,67,72,72,67,,72,72,,72,,,,,,,,,,,,,,,,,72,,,,,,72,,72,,72,72,,72,72',
'72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72,,72,72',
',,,72,72,72,72,72,72,72,72,72,,,72,354,354,72,,354,354,,354,,,,,,,,',
',,,,,,,,354,,,,,,354,,354,,354,354,,354,354,354,,354,354,,,,,354,354',
',,354,,,354,354,,,,,,,354,,,,,,354,,,,354,354,,354,354,,,,354,354,354',
'354,354,354,354,354,354,,,354,343,343,354,,343,343,,343,,,,,,,,,,,,',
',,,,343,,,,,,343,,343,,343,343,,343,343,343,,343,343,,,,,343,343,,,343',
',,343,343,,,,,,,343,,,,,,343,,,,343,343,,343,343,,,,343,343,343,343',
'343,343,343,343,343,,,343,77,77,343,,77,77,,77,,,,,,,,,,,,,,,,,77,,',
',,,77,,77,,77,77,,77,77,77,,77,77,,,,,77,77,,,77,,,77,77,,,,,,,77,,',
',,,77,,,,77,77,,77,77,,,,77,77,77,77,77,77,77,77,77,,,77,315,315,77',
',315,315,,315,,,,,,,,,,,,,,,,,315,,,,,,315,,315,,315,315,,315,315,315',
',315,315,,,,,315,315,,,315,,,315,315,,,,,,,315,,,,,,315,,,,315,315,',
'315,315,,,,315,315,315,315,315,315,315,315,315,,,315,80,80,315,,80,80',
',80,,,,,,,,,,,,,,,,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80',
'80,,,80,,,80,80,,,,,,,80,,,,,,80,,,,80,80,,80,80,,,,80,80,80,80,80,80',
'80,80,80,,,80,314,314,80,,314,314,,314,,,,,,,,,,,,,,,,,314,,,,,,314',
',314,,314,314,,314,314,314,,314,314,,,,,314,314,,,314,,,314,314,,,,',
',,314,,,,,,314,,,,314,314,,314,314,,,,314,314,314,314,314,314,314,314',
'314,,,314,82,82,314,,82,82,,82,,,,,,,,,,,,,,,,,82,,,,,,82,,82,,82,82',
',82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82,,,,,,,82,,,,,,82,,,,82,82',
',82,82,,,,82,82,82,82,82,82,82,82,82,,,82,83,83,82,,83,83,,83,,,,,,',
',,,,,,,,,,83,,,,,,83,,83,,83,83,,83,83,83,,83,83,83,83,,,83,83,,,83',
',,83,83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83,83,83,83,83,83,83,83',
'83,,,83,84,84,83,,84,84,,84,,,,,,,,,,,,,,,,,84,,,,,,84,,84,,84,84,,84',
'84,84,,84,84,84,84,,,84,84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84,,84',
'84,,,,84,84,84,84,84,84,84,84,84,,,84,85,85,84,,85,85,,85,,,,,,,,,,',
',,,,,,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85',
'85,,,,,,,85,,,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,85,85,85,85,,',
'85,86,86,85,,86,86,,86,,,,,,,,,,,,,,,,,86,,,,,,86,,86,,86,86,,86,86',
'86,,86,86,86,86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86',
',,,86,86,86,86,86,86,86,86,86,,,86,87,87,86,,87,87,,87,,,,,,,,,,,,,',
',,,87,,,,,,87,,87,,87,87,,87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87',
',,,,,,87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,87,87,87,87,,,87',
'88,88,87,,88,88,,88,,,,,,,,,,,,,,,,,88,,,,,,88,,88,,88,88,,88,88,88',
',88,88,88,88,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,',
',,88,88,88,88,88,88,88,88,88,,,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,',
',,89,,,,,,89,,89,,89,89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89',
',,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89,89,89,89,89,89,89,89,,,89',
'90,90,89,,90,90,,90,,,,,,,,,,,,,,,,,90,,,,,,90,90,90,90,90,90,90,90',
'90,90,,90,90,,,,,90,90,90,90,90,,,90,90,,,,,,,90,,,,,90,90,,,,90,90',
',90,90,,,,90,90,90,90,90,90,90,90,90,90,,90,91,91,90,,91,91,,91,,,,',
',,,,,,,,,,,,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,',
'91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,91,91',
',,91,92,92,91,,92,92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92',
'92,,92,92,,,,,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,',
',92,92,92,92,92,92,92,92,92,,,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,',
',93,,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,',
',93,,,,,,93,,,,93,93,,93,93,,,,93,93,93,93,93,93,93,93,93,,,93,94,94',
'93,,94,94,,94,,,,,,,,,,,,,,,,,94,,,,,,94,,94,,94,94,,94,94,94,,94,94',
',,,,94,94,,,94,,,94,94,,,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94',
'94,94,94,94,94,94,,,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,,,,,,95',
',95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95',
',,,95,95,,95,95,,,,95,95,95,95,95,95,95,95,95,,,95,96,96,95,,96,96,',
'96,,,,,,,,,,,,,,,,,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96',
',,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96,96,96,96',
'96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,,,,,,97,,97,,97,97',
',97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97',
'97,,,,97,97,97,97,97,97,97,97,97,,,97,98,98,97,,98,98,,98,,,,,,,,,,',
',,,,,,98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98',
',,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98,98,98,98,,,98',
'99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,,,,,,99,,99,,99,99,,99,99,99',
',99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99',
'99,99,99,99,99,99,99,99,,,99,100,100,99,,100,100,,100,,,,,,,,,,,,,,',
',,100,,,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100',
',,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100,100,100',
'100,100,100,100,100,,,100,101,101,100,,101,101,,101,,,,,,,,,,,,,,,,',
'101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,',
',101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101,101,101,101',
'101,101,101,101,,,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,,,,102',
',,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102',
'102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102,102',
'102,102,102,,,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103,,,,',
',103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,,,103,103',
',,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103,103,103,103',
'103,103,,,103,104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104,,,,,,104',
',104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,',
',,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104,104,104,104',
'104,,,104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105,,,,,,105,,105',
',105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105',
',,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105,105,105,105,105',
',,105,106,106,105,,106,106,,106,,,,,,,,,,,,,,,,,106,,,,,,106,,106,,106',
'106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,,,106,,,,',
',106,,,,106,106,,106,106,,,,106,106,106,106,106,106,106,106,106,,,106',
'107,107,106,,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107,,107,107',
',107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,,,107',
',,,107,107,,107,107,,,,107,107,107,107,107,107,107,107,107,,,107,108',
'108,107,,108,108,,108,,,,,,,,,,,,,,,,,108,,,,,,108,,108,,108,108,,108',
'108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108',
'108,,108,108,,,,108,108,108,108,108,108,108,108,108,,,108,109,109,108',
',109,109,,109,,,,,,,,,,,,,,,,,109,,,,,,109,,109,,109,109,,109,109,109',
',109,109,,,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,',
'109,109,,,,109,109,109,109,109,109,109,109,109,,,109,110,110,109,,110',
'110,,110,,,,,,,,,,,,,,,,,110,,,,,,110,,110,,110,110,,110,110,110,,110',
'110,,,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,110,110,110,,110',
'110,,,,110,110,110,110,110,110,110,110,110,,,110,111,111,110,,111,111',
',111,,,,,,,,,,,,,,,,,111,111,,,,,111,,111,,111,111,,111,111,111,,111',
'111,111,111,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111',
',111,111,,,,111,111,111,111,111,111,111,111,111,,,111,312,312,111,,312',
'312,,312,,,,,,,,,,,,,,,,,312,,,,,,312,,312,,312,312,,312,312,312,,312',
'312,,,,,312,312,,,312,,,312,312,,,,,,,312,,,,,,312,,,,312,312,,312,312',
',,,312,312,312,312,312,312,312,312,312,,,312,311,311,312,,311,311,,311',
',,,,,,,,,,,,,,,,311,,,,,,311,,311,,311,311,,311,311,311,,311,311,,,',
',311,311,,,311,,,311,311,,,,,,,311,,,,,,311,,,,311,311,,311,311,,,,311',
'311,311,311,311,311,311,311,311,,,311,114,114,311,,114,114,,114,,,,',
',,,,,,,,,,,,114,,,,,,114,,114,,114,114,,114,114,114,,114,114,,,,,114',
'114,,,114,,,114,114,,,,,,,114,,,,,,114,,,,114,114,,114,114,,,,114,114',
'114,114,114,114,114,114,114,,,114,115,115,114,,115,115,,115,,,,,,,,',
',,,,,,,,115,,,,,,115,,115,,115,115,,115,115,115,,115,115,,,,,115,115',
',,115,,,115,115,,,,,,,115,,,,,,115,,,,115,115,,115,115,,,,115,115,115',
'115,115,115,115,115,115,,,115,310,310,115,,310,310,,310,,,,,,,,,,,,',
',,,,310,,,,,,310,,310,,310,310,,310,310,310,,310,310,,,,,310,310,,,310',
',,310,310,,,,,,,310,,,,,,310,,,,310,310,,310,310,,,,310,310,310,310',
'310,310,310,310,310,,,310,295,295,310,,295,295,,295,,,,,,,,,,,,,,,,',
'295,,,,,,295,,295,,295,295,,295,295,295,,295,295,295,295,,,295,295,',
',295,,,295,295,,,,,,,295,,,,,,295,,,,295,295,,295,295,,,,295,295,295',
'295,295,295,295,295,295,,,295,118,118,295,,118,118,,118,,,,,,,,,,,,',
',,,,118,,,,,,118,,118,,118,118,,118,118,118,,118,118,,,,,118,118,,,118',
',,118,118,,,,,,,118,,,,,,118,,,,118,118,,118,118,,,,118,118,118,118',
'118,118,118,118,118,,,118,290,290,118,,290,290,,290,,,,,,,,,,,,,,,,',
'290,,,,,,290,,290,,290,290,,290,290,290,,290,290,290,290,,,290,290,',
',290,,,290,290,,,,,,,290,,,,,,290,,,,290,290,,290,290,,,,290,290,290',
'290,290,290,290,290,290,,,290,289,289,290,,289,289,,289,289,,,,,,,,',
',,,,,,,289,,,,,,289,,289,,289,289,,289,289,289,,289,289,289,289,,,289',
'289,,,289,,,289,289,,,,,,,289,,,,,,289,,,,289,289,,289,289,,,,289,289',
'289,289,289,289,289,289,289,,,289,285,285,289,,285,285,,285,,,,,,,,',
',,,,,,,,285,,,,,,285,,285,,285,285,,285,285,285,,285,285,285,285,,,285',
'285,,,285,,,285,285,,,,,,,285,,,,,,285,,,,285,285,,285,285,,,,285,285',
'285,285,285,285,285,285,285,,,285,275,275,285,,275,275,,275,,,,,,,,',
',,,,,,,,275,,,,,,275,,275,,275,275,,275,275,275,,275,275,,,,,275,275',
',,275,,,275,275,,,,,,,275,,,,,,275,,,,275,275,,275,275,,,,275,275,275',
'275,275,275,275,275,275,,,275,274,274,275,,274,274,,274,274,,,,,,,,',
',,,,,,,274,,,,,,274,,274,,274,274,,274,274,274,,274,274,274,274,,,274',
'274,,,274,,,274,274,,,,,,,274,,,,,,274,,,,274,274,,274,274,,,,274,274',
'274,274,274,274,274,274,274,,,274,273,273,274,,273,273,,273,273,,,,',
',,,,,,,,,,,273,,,,,,273,,273,,273,273,,273,273,273,,273,273,273,273',
',,273,273,,,273,,,273,273,,,,,,,273,,,,,,273,,,,273,273,,273,273,,,',
'273,273,273,273,273,273,273,273,273,,,273,137,137,273,,137,137,,137',
',,,,,,,,,,,,,,,,137,137,,,,,137,,137,,137,137,,137,137,137,,137,137',
'137,137,,,137,137,,,137,,,137,137,,,,,,,137,,,,,,137,,,,137,137,,137',
'137,,,,137,137,137,137,137,137,137,137,137,,,137,241,241,137,,241,241',
',241,,,,,,,,,,,,,,,,,241,,,,,,241,,241,,241,241,,241,241,241,,241,241',
',,,,241,241,,,241,,,241,241,,,,,,,241,,,,,,241,,,,241,241,,241,241,',
',,241,241,241,241,241,241,241,241,241,,,241,258,258,241,,258,258,,258',
'258,,,,,,,,,,,,,,,,258,,,,,,258,,258,,258,258,,258,258,258,,258,258',
'258,258,,,258,258,,,258,,,258,258,,,,,,,258,,,,,,258,,,,258,258,,258',
'258,,,,258,258,258,258,258,258,258,258,258,,138,258,138,,258,,,,,,,',
'138,138,138,,138,,138,138,,138,138,138,138,,,,,,,,,,,,,,,,138,,,,138',
'138,,,138,138,138,138,138,138,,138,138,140,,140,,,138,,,,,,,140,140',
'140,,140,,140,140,,140,140,140,140,,,,,,,,,,138,,,,,,140,,,,140,140',
',,140,140,140,140,140,140,,140,140,141,,141,,,140,,,,,,,141,141,141',
',141,,141,141,,141,141,141,141,,,,,,,,,,140,,,,,,141,,,,141,141,,,141',
'141,141,141,141,141,246,141,141,,,,,,141,,,,246,246,246,,246,,246,246',
',246,246,246,246,,,,,,,,,,,,,141,,,246,,,,246,246,,,246,246,246,246',
'246,246,251,246,246,,,,,,246,,,,251,251,251,251,251,,251,251,,251,251',
'251,251,,,,,,,,,,,,,246,,,251,,,,251,251,,,251,251,251,251,251,251,238',
'251,251,,,238,,,251,,,,238,238,238,,238,,238,238,,238,238,238,238,,',
',,,,,,,,,,251,,,238,,,,238,238,,,238,238,238,238,238,238,389,238,238',
',,,,,238,,,,389,389,389,,389,,389,389,,389,389,389,389,,,,,,,,,,,,,238',
',,389,,,,389,389,,237,389,389,389,389,389,389,,389,389,,,237,237,237',
'389,237,,237,237,,237,237,237,237,,,,,,,,,,,,,,,,237,,,,389,237,,236',
'237,237,237,237,237,237,,237,237,,,236,236,236,237,236,235,236,236,',
'236,236,236,236,,,,,,235,235,,235,,235,235,,235,,236,,,,237,,,,236,236',
'236,236,236,236,,236,236,235,,,,,236,,234,235,235,235,235,235,235,,235',
'235,,,,234,234,235,234,233,234,234,,234,,,,,,236,,,233,233,,233,,233',
'233,,233,,234,,,,235,,,,234,234,234,234,234,234,,234,234,233,,,,,234',
',232,233,233,233,233,233,233,,233,233,,,,232,232,233,232,231,232,232',
',232,,,,,,234,,,,231,,231,,231,231,,,,232,,,,233,230,,,232,232,232,232',
'232,232,,232,232,231,,230,,230,232,230,230,231,231,231,231,231,231,',
'231,231,,,,,,231,,,,,,230,,,,,,232,,230,230,230,230,230,230,391,230',
'230,,,,,,230,231,,,391,391,391,,391,,391,391,,391,391,391,391,,,,,,',
',,,,,,230,,,391,,,,391,391,,,391,391,391,391,391,391,175,391,391,,,',
',,391,,,,175,175,175,,175,,175,175,,175,175,175,175,,,,,,,,,,,,,391',
',,175,,,,175,175,,,175,175,175,175,175,175,,175,175,,,,,,175,392,,,',
',,,,,,175,175,392,392,392,,392,,392,392,,392,392,392,392,,,,175,,,,',
',,,,,,,392,,,,392,392,,,392,392,392,392,392,392,218,392,392,,,,,,392',
',,,218,218,218,,218,,218,218,,218,218,218,218,,,,,,,,,,,,,392,,,218',
',,,218,218,,,218,218,218,218,218,218,393,218,218,,,,,,218,,,,393,393',
'393,,393,,393,393,,393,393,393,393,,,,,,,,,,,,,218,,,393,,,,393,393',
',,393,393,393,393,393,393,409,393,393,,,,,,393,,,,409,409,409,,409,',
'409,409,,409,409,409,409,,,,,,,,,,,,,393,,,409,,,,409,409,,,409,409',
'409,409,409,409,187,409,409,,,,,,409,,,,187,187,187,187,187,,187,187',
',187,187,187,187,,,,,,,,,,,,,409,,,187,,,,187,187,,,187,187,187,187',
'187,187,9,187,187,,,,,,187,,,,9,9,9,,9,,9,9,,9,9,9,9,,,,,,,,,,,,,187',
',,9,,,,9,9,,,9,9,9,9,9,9,390,9,9,,,,,,9,,,,390,390,390,,390,,390,390',
',390,390,390,390,,,,,,,,,,,,,9,,,390,,,,390,390,,,390,390,390,390,390',
'390,,390,390,,307,307,307,307,390,307,307,307,,307,,307,307,,,,,,,307',
'307,307,,,,307,,,,,,,,390,,,,307,307,,,,,,,,,,,,307,307,307,307,307',
'307,307,307,307,307,309,309,309,309,,309,309,309,,309,,309,309,,,,,',
',309,309,309,,,,309,,,,,,,,,,,,309,309,,,,,,,,,,,,309,309,309,309,309',
'309,309,309,309,309,369,369,369,369,,369,369,369,,369,,369,369,,,,,',
',369,369,369,,,,369,,,,,,,,,,,,369,369,,,,,,,,,,,,369,369,369,369,369',
'369,369,369,369,369,344,344,344,344,,344,344,344,,344,,344,344,,,,,',
',344,344,344,,,,344,,,,,,,,,,,,344,344,,,,,,,,,,,,344,344,344,344,344',
'344,344,344,344,344,245,245,245,245,,245,245,245,,245,,245,245,,,,,',
',245,245,245,,,,245,,,,,,,,,,,,245,245,,,,,,,,,,,,245,245,245,245,245',
'245,245,245,245,245' ]
        racc_action_check = arr = ::Array.new(9544, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   414,   nil,   nil,   182,   391,   nil,   789,   388,  9125,
   642,   734,   390,   nil,   nil,   918,  1010,  1102,  1194,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,   295,   329,  1562,  1654,  1746,   292,
   204,   107,   333,   843,   384,    19,   113,   111,   109,   105,
    21,   nil,   nil,   nil,   nil,  2942,  3034,  3126,   nil,   nil,
   nil,   nil,  3218,   nil,   203,   166,   nil,  3494,   nil,   217,
  3678,   202,  3862,  3954,  4046,  4138,  4230,  4322,  4414,  4506,
  4598,  4690,  4782,  4874,  4966,  5058,  5150,  5242,  5334,  5426,
  5518,  5610,  5702,  5794,  5886,  5978,  6070,  6162,  6254,  6346,
  6438,  6530,   165,   181,  6806,  6898,   178,   116,  7174,    92,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1290,
   248,  1106,  1284,   135,   nil,   278,   250,  7818,  8087,   nil,
  8144,  8201,   279,   296,   480,   nil,   nil,  2298,   312,   nil,
   307,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   313,   nil,
   327,   nil,   330,   nil,    93,   nil,   nil,   333,   nil,   104,
   nil,   nil,    64,  2114,   225,  8792,  2022,   nil,   334,   nil,
   nil,   nil,   nil,   362,   365,   368,   380,  9071,   388,  2206,
    -4,    -1,    -2,   550,  1378,  1930,   nil,   nil,    90,   159,
    67,    44,     9,   572,   666,   659,   889,   751,    -9,     7,
    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  8909,     9,
  1376,   554,   922,   462,   186,  1100,  1014,  1198,    94,     2,
  8684,  8656,  8639,  8592,  8575,  8528,  8511,  8464,  8363,   nil,
   nil,  7910,   299,   238,   nil,  9452,  8255,   256,   nil,   279,
   253,  8309,   nil,   250,   nil,    96,   nil,   nil,  8002,   nil,
   260,   nil,   nil,   nil,   nil,   nil,   231,   204,   -24,   163,
   nil,   -11,   nil,  7726,  7634,  7542,   105,    65,    31,    19,
   nil,   117,   981,   -28,    60,  7450,    87,    96,   nil,  7358,
  7266,   nil,   nil,   nil,   nil,  7082,   nil,   nil,   nil,   nil,
   115,   nil,   nil,   nil,   nil,   130,     4,  9212,   156,  9272,
  6990,  6714,  6622,   nil,  3770,  3586,   207,   nil,   202,   nil,
   217,   nil,   nil,   nil,   nil,   nil,   222,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   226,  3402,  9392,   233,   nil,   567,   nil,   245,
   252,   nil,   192,   112,  3310,   nil,   nil,  2850,  2758,   nil,
   284,   -15,   291,   269,    -7,  2666,   nil,  2574,  2482,  9332,
   nil,   307,   nil,   935,   nil,   nil,  2390,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   255,   114,   319,   nil,   nil,  8417,
  9179,  8738,  8855,  8963,   336,  1838,   279,   343,   nil,   nil,
   341,  1470,   nil,   nil,   nil,   338,   nil,   nil,   nil,  9017,
    18,    72,   nil,  1286,   373,   350,   nil,   375,   376,   nil,
   nil,   376,   nil,   nil,   377,   375,   826,   nil,   381,   nil,
   nil,   383,   352,   nil,   nil,   nil,   nil,   nil,   385,   nil,
   nil,   nil,   nil,   458,   nil,   366,   274,   nil,   nil,   398,
   403,   nil,   nil,   nil,    90,   nil,   407,   nil,   408,   nil,
   410,   nil,   nil,   nil,   nil,   382,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -267,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -267,  -267,  -179,   -33,   -34,  -267,  -267,  -267,  -267,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -90,   -94,  -267,  -267,  -267,  -267,
  -267,  -267,  -267,  -267,  -267,  -217,  -240,  -199,  -200,  -201,
  -202,  -195,  -196,  -197,  -198,  -267,  -267,  -267,  -213,  -214,
  -215,  -216,  -267,  -219,  -267,  -232,  -235,  -267,  -241,  -267,
  -267,    -7,  -267,  -267,  -267,  -267,  -267,  -267,  -267,  -267,
  -130,  -267,  -267,  -267,  -267,  -267,  -267,  -267,  -267,  -267,
  -267,  -267,  -267,  -267,  -267,  -267,  -267,  -267,  -267,  -267,
  -267,  -267,  -267,  -125,  -266,  -266,   -22,   -23,  -267,  -266,
  -148,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,   -46,
  -179,   -47,   -54,  -267,   -91,  -267,  -267,  -267,  -267,  -101,
  -267,  -267,  -266,  -266,  -267,  -145,  -146,  -267,  -242,  -159,
  -161,  -162,  -163,  -164,  -165,  -167,  -168,  -217,  -266,   -14,
  -242,  -204,  -242,  -206,  -267,  -209,  -210,  -267,  -218,  -267,
  -223,  -226,  -267,  -230,  -267,  -267,  -267,   470,    -6,    -9,
   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -267,  -242,  -267,
   -83,   -84,   -85,  -253,  -259,  -247,  -131,  -134,  -199,  -200,
  -201,  -202,  -267,  -250,  -264,  -179,  -256,  -262,  -196,  -197,
  -198,  -246,  -251,  -252,  -254,  -255,  -257,  -265,   -59,  -267,
   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,
   -48,   -49,   -50,   -51,   -52,   -53,   -55,   -56,  -267,   -57,
  -119,  -267,  -242,   -87,   -95,  -130,  -129,  -267,  -128,  -267,
  -244,  -267,   -28,  -266,  -180,  -267,   -58,   -96,  -267,   -99,
  -242,  -183,  -185,  -186,  -187,  -188,  -190,  -267,  -267,  -193,
  -240,  -267,   -93,  -267,  -267,  -267,  -267,  -267,  -267,  -267,
  -156,  -266,  -243,  -267,  -267,  -243,  -267,  -267,  -207,  -267,
  -267,  -220,  -221,  -222,  -224,  -267,  -227,  -228,  -229,  -231,
  -242,  -233,  -236,  -238,  -239,    -8,  -267,  -130,  -267,  -243,
  -267,  -267,  -267,   -35,  -267,  -267,  -242,  -121,  -267,   -89,
  -242,  -133,  -135,  -136,  -137,  -138,  -267,  -247,  -248,  -249,
  -250,  -253,  -256,  -258,  -259,  -260,  -261,  -262,  -263,  -264,
  -126,  -127,  -267,  -245,  -130,  -267,  -151,  -267,  -181,  -242,
  -267,   -98,  -267,  -243,  -267,  -191,  -192,  -267,  -267,   -92,
  -267,  -104,  -267,  -110,  -267,  -267,  -114,  -266,  -266,  -130,
  -155,  -267,  -169,  -267,  -160,  -166,  -266,   -15,  -203,  -205,
  -208,  -211,  -212,  -225,  -267,  -267,  -242,   -26,  -132,  -141,
  -139,  -140,   -60,  -123,  -267,  -243,   -86,  -267,   -25,   -29,
  -242,  -266,  -152,  -153,  -154,  -267,   -97,  -100,  -184,  -189,
  -267,  -104,  -103,  -267,  -267,  -110,  -109,  -267,  -267,  -113,
  -115,  -267,  -149,  -150,  -267,  -242,  -267,  -170,  -267,  -234,
  -237,  -267,   -30,  -120,  -122,   -88,  -124,   -27,  -267,  -182,
  -194,  -102,  -105,  -267,  -108,  -267,  -266,  -142,  -143,  -267,
  -267,  -158,  -171,   -24,   -31,  -147,  -267,  -107,  -267,  -112,
  -267,  -117,  -118,  -144,  -157,  -244,  -106,  -111,  -116,   -32 ]

racc_goto_table = [
     2,   129,   131,   132,   134,   133,   250,   153,   151,   120,
   168,   188,   269,   219,   240,   342,   248,   248,   260,   374,
   144,   302,   366,    81,   412,   253,   421,   424,   365,   116,
   117,   316,   138,   140,   141,   428,   247,   249,   442,   388,
   239,   257,   431,   460,   345,   416,   142,   143,   276,   277,
   269,   158,   159,   159,   167,   402,   300,   371,   399,   170,
   438,   375,   408,   175,   284,   356,   355,   160,   162,   179,
   180,   181,   182,   381,   441,   296,   187,   218,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   444,   159,   178,
   246,   246,   297,   281,   251,   183,   184,   185,   186,     3,
   427,   294,   420,   242,   295,   286,   293,   287,   171,   173,
   298,     1,   nil,   nil,   159,   nil,   nil,   120,   nil,   nil,
   nil,   269,   nil,   nil,   nil,   nil,   nil,   349,   nil,   271,
   nil,   278,   nil,   308,   nil,   317,   nil,   279,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   346,   nil,   nil,   nil,   nil,
   153,   151,   nil,   305,   nil,   nil,   320,   nil,   nil,   nil,
   nil,   nil,   nil,   299,   nil,   131,   306,   nil,   nil,   138,
   140,   141,   nil,   372,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   318,   nil,   nil,
   142,   143,   120,   319,   158,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   352,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   238,   386,   269,
   469,   430,   nil,   383,   nil,   nil,   153,   151,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   384,   nil,   nil,   350,   nil,
   nil,   218,   nil,   nil,   nil,   400,   nil,   nil,   nil,   423,
   423,   394,   377,   360,   362,   397,   167,   382,   423,   410,
   nil,   nil,   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   425,   nil,   nil,   nil,   nil,   nil,   389,   390,   391,   434,
   392,   393,   nil,   423,   405,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   151,   251,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   409,   432,   465,   218,   403,   377,   nil,   nil,   461,   nil,
   nil,   218,   nil,   nil,   nil,   437,   435,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   449,   238,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   138,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   450,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   251,   nil,   nil,   456,   nil,   458,   462 ]

racc_goto_check = [
     2,    10,    10,    10,    41,     6,    13,    38,    39,    61,
    85,    11,    40,    19,    54,    14,    53,    53,    46,    70,
    64,    93,    51,     5,    48,    62,    63,    63,    50,     9,
     9,    55,    10,    10,    10,    63,    57,    57,    47,    58,
    20,    45,    12,    52,    66,    49,    61,    61,    62,    62,
    40,    61,     6,     6,     6,    67,    46,    69,    16,     6,
    63,    72,    73,    10,    62,    74,    76,     8,     8,     6,
     6,     6,     6,    80,    48,    81,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    49,     6,     5,
    10,    10,    82,    15,    10,     9,     9,     9,     9,     3,
    70,    86,    51,     8,    87,    15,    89,    15,    90,    91,
    92,     1,   nil,   nil,     6,   nil,   nil,    61,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,    46,   nil,     8,
   nil,    61,   nil,    15,   nil,    54,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    53,   nil,   nil,   nil,   nil,
    38,    39,   nil,     6,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,    10,     2,   nil,   nil,    10,
    10,    10,   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
    61,    61,    61,    41,    61,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    11,    40,
    14,    93,   nil,    85,   nil,   nil,    38,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,     2,   nil,
   nil,    10,   nil,   nil,   nil,    11,   nil,   nil,   nil,    53,
    53,    15,     6,     2,     2,    15,     6,     6,    53,    19,
   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,   nil,    10,    10,    10,    54,
    10,    10,   nil,    53,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,    15,    13,    10,    61,     6,   nil,   nil,    53,   nil,
   nil,    10,   nil,   nil,   nil,    15,    41,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   121,     0,   109,   nil,    19,   -13,   nil,     2,    19,
   -14,   -79,  -344,  -112,  -235,   -45,  -285,   nil,   nil,   -78,
   -70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -46,   -45,
  -124,   -40,   nil,   nil,   nil,   -94,  -118,  -375,  -337,  -318,
  -247,  -253,  -403,   -98,   -96,  -210,   nil,   -78,  -270,   nil,
   nil,    -3,   -94,  -341,   -31,   nil,  -209,  -292,   nil,  -224,
  -263,   nil,  -222,  -291,  -203,   nil,  -201,   nil,   nil,   nil,
  -216,   -97,   -70,   nil,   nil,   -62,   -58,   -55,   nil,   -53,
    44,    44,   -53,  -154 ]

racc_goto_default = [
   nil,   nil,   422,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   252,    13,    14,   364,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,   nil,    44,    45,   135,   nil,   nil,   139,   nil,   nil,
   nil,   nil,   nil,   254,   nil,   nil,   113,   nil,   196,   202,
   197,    51,   nil,   nil,   nil,   119,   nil,   nil,   148,   nil,
   149,   150,   154,   261,   262,   263,   264,   265,   268,   164,
   166,    68,    69,    70,    72,   nil,   nil,   nil,   169,   nil,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 100, :_reduce_1,
  1, 100, :_reduce_2,
  0, 100, :_reduce_3,
  1, 101, :_reduce_4,
  1, 103, :_reduce_5,
  3, 103, :_reduce_6,
  2, 103, :_reduce_7,
  1, 104, :_reduce_8,
  3, 104, :_reduce_9,
  1, 105, :_reduce_none,
  3, 105, :_reduce_11,
  3, 105, :_reduce_12,
  3, 105, :_reduce_13,
  1, 107, :_reduce_14,
  3, 107, :_reduce_15,
  1, 106, :_reduce_none,
  3, 106, :_reduce_17,
  3, 106, :_reduce_18,
  3, 106, :_reduce_19,
  3, 106, :_reduce_20,
  1, 108, :_reduce_none,
  2, 108, :_reduce_22,
  2, 108, :_reduce_23,
  7, 108, :_reduce_24,
  5, 108, :_reduce_25,
  5, 108, :_reduce_26,
  4, 115, :_reduce_27,
  1, 112, :_reduce_28,
  3, 112, :_reduce_29,
  1, 111, :_reduce_30,
  2, 111, :_reduce_31,
  4, 111, :_reduce_32,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  4, 109, :_reduce_35,
  3, 109, :_reduce_36,
  3, 109, :_reduce_37,
  3, 109, :_reduce_38,
  3, 109, :_reduce_39,
  3, 109, :_reduce_40,
  3, 109, :_reduce_41,
  3, 109, :_reduce_42,
  3, 109, :_reduce_43,
  3, 109, :_reduce_44,
  3, 109, :_reduce_45,
  2, 109, :_reduce_46,
  2, 109, :_reduce_47,
  3, 109, :_reduce_48,
  3, 109, :_reduce_49,
  3, 109, :_reduce_50,
  3, 109, :_reduce_51,
  3, 109, :_reduce_52,
  3, 109, :_reduce_53,
  2, 109, :_reduce_54,
  3, 109, :_reduce_55,
  3, 109, :_reduce_56,
  3, 109, :_reduce_57,
  3, 109, :_reduce_58,
  1, 118, :_reduce_59,
  3, 118, :_reduce_60,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_81,
  1, 116, :_reduce_82,
  1, 116, :_reduce_83,
  1, 116, :_reduce_84,
  1, 116, :_reduce_85,
  5, 117, :_reduce_86,
  3, 117, :_reduce_87,
  6, 117, :_reduce_88,
  4, 117, :_reduce_89,
  1, 121, :_reduce_90,
  2, 121, :_reduce_91,
  4, 141, :_reduce_92,
  3, 141, :_reduce_93,
  1, 141, :_reduce_94,
  3, 142, :_reduce_95,
  2, 140, :_reduce_96,
  3, 144, :_reduce_97,
  2, 144, :_reduce_98,
  2, 143, :_reduce_99,
  4, 143, :_reduce_100,
  2, 124, :_reduce_101,
  5, 146, :_reduce_102,
  4, 146, :_reduce_103,
  0, 147, :_reduce_none,
  2, 147, :_reduce_105,
  4, 147, :_reduce_106,
  3, 147, :_reduce_107,
  6, 125, :_reduce_108,
  5, 125, :_reduce_109,
  0, 148, :_reduce_none,
  4, 148, :_reduce_111,
  3, 148, :_reduce_112,
  5, 123, :_reduce_113,
  1, 149, :_reduce_114,
  2, 149, :_reduce_115,
  5, 150, :_reduce_116,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 119, :_reduce_none,
  4, 119, :_reduce_120,
  1, 154, :_reduce_121,
  3, 154, :_reduce_122,
  3, 153, :_reduce_123,
  6, 122, :_reduce_124,
  2, 122, :_reduce_125,
  3, 155, :_reduce_126,
  3, 155, :_reduce_127,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  0, 110, :_reduce_130,
  1, 110, :_reduce_131,
  3, 110, :_reduce_132,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 157, :_reduce_139,
  3, 157, :_reduce_140,
  3, 157, :_reduce_141,
  6, 126, :_reduce_142,
  6, 127, :_reduce_143,
  7, 128, :_reduce_144,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  7, 129, :_reduce_147,
  1, 164, :_reduce_148,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  2, 165, :_reduce_152,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  4, 131, :_reduce_155,
  3, 131, :_reduce_156,
  7, 130, :_reduce_157,
  6, 130, :_reduce_158,
  1, 167, :_reduce_159,
  3, 167, :_reduce_160,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_163,
  1, 169, :_reduce_none,
  1, 170, :_reduce_165,
  3, 170, :_reduce_166,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 168, :_reduce_none,
  2, 168, :_reduce_170,
  6, 133, :_reduce_171,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_179,
  1, 161, :_reduce_180,
  2, 161, :_reduce_181,
  4, 161, :_reduce_182,
  1, 145, :_reduce_183,
  3, 145, :_reduce_184,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  3, 175, :_reduce_189,
  1, 175, :_reduce_190,
  2, 176, :_reduce_191,
  2, 174, :_reduce_192,
  1, 177, :_reduce_193,
  4, 177, :_reduce_194,
  1, 120, :_reduce_195,
  1, 134, :_reduce_196,
  1, 134, :_reduce_197,
  1, 134, :_reduce_198,
  1, 134, :_reduce_199,
  1, 134, :_reduce_200,
  1, 134, :_reduce_201,
  1, 134, :_reduce_202,
  4, 135, :_reduce_203,
  2, 135, :_reduce_204,
  4, 135, :_reduce_205,
  2, 135, :_reduce_206,
  3, 136, :_reduce_207,
  4, 136, :_reduce_208,
  2, 136, :_reduce_209,
  1, 178, :_reduce_210,
  3, 178, :_reduce_211,
  3, 179, :_reduce_212,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 180, :_reduce_216,
  1, 180, :_reduce_217,
  2, 181, :_reduce_218,
  1, 183, :_reduce_219,
  1, 185, :_reduce_220,
  1, 186, :_reduce_221,
  2, 184, :_reduce_222,
  1, 187, :_reduce_223,
  1, 188, :_reduce_224,
  2, 188, :_reduce_225,
  2, 182, :_reduce_226,
  2, 189, :_reduce_227,
  2, 189, :_reduce_228,
  3, 102, :_reduce_229,
  0, 191, :_reduce_none,
  1, 191, :_reduce_none,
  0, 190, :_reduce_232,
  2, 190, :_reduce_233,
  4, 190, :_reduce_234,
  1, 132, :_reduce_235,
  3, 132, :_reduce_236,
  5, 132, :_reduce_237,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 139, :_reduce_240,
  1, 137, :_reduce_241,
  0, 114, :_reduce_none,
  1, 114, :_reduce_243,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  0, 152, :_reduce_266 ]

racc_reduce_n = 267

racc_shift_n = 470

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :SITE_R => 89,
  :APPLICATION => 90,
  :PRODUCES => 91,
  :CONSUMES => 92,
  :SITE => 93,
  :LOW => 94,
  :HIGH => 95,
  :LISTSTART => 96,
  :SPLAT => 97,
  :MODULO => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "capability_mapping",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_81(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_82(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_83(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 259)
  def _reduce_84(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_85(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_88(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_89(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_93(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_94(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_95(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_96(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_97(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_98(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_99(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_100(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_101(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_102(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_103(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_105(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_106(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_107(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 361)
  def _reduce_108(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 365)
  def _reduce_109(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 110 omitted

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_111(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_112(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_113(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_114(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 393)
  def _reduce_115(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_116(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_120(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_122(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_123(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_125(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_126(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_127(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_130(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_131(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_132(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_139(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_140(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_141(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_142(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_143(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 509)
  def _reduce_144(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        classname(val[0][:value]),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_147(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 536)
  def _reduce_148(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_155(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_156(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_157(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_158(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_159(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_160(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_163(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_165(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_166(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_170(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_171(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_179(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_180(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_181(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_183(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_184(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_189(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_190(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_191(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_192(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_193(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_194(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_195(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_196(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_197(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_198(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_199(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_200(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_201(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_202(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_203(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_204(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_205(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_206(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_207(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_208(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_209(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_210(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_211(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_212(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_216(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_217(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_218(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_219(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_220(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_221(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_222(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_223(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_224(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_225(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_226(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_227(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_228(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_229(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 230 omitted

# reduce 231 omitted

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_232(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_233(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_234(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_235(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_236(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_237(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'egrammar.ra', 754)
  def _reduce_240(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 757)
  def _reduce_241(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 242 omitted

module_eval(<<'.,.,', 'egrammar.ra', 763)
  def _reduce_243(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

module_eval(<<'.,.,', 'egrammar.ra', 792)
  def _reduce_266(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
