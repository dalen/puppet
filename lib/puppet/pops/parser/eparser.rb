#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 724)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'68,207,112,-209,223,51,53,115,278,210,277,114,79,90,339,94,247,89,-200',
'237,80,-134,51,53,68,292,51,53,225,115,105,104,273,114,207,204,79,90',
'93,94,236,89,54,-209,80,237,72,73,75,74,77,78,68,70,71,278,248,277,-200',
'54,69,-134,93,120,59,90,122,94,76,89,72,73,75,74,77,78,210,70,71,237',
'68,59,115,227,69,59,114,329,226,291,93,-132,76,90,68,94,244,89,72,73',
'75,74,77,78,68,70,71,90,202,94,105,89,69,87,88,84,79,90,93,94,76,89',
'51,53,80,82,81,83,75,74,281,-132,93,70,71,115,192,115,168,114,69,114',
'93,232,231,115,86,85,76,114,72,73,75,74,77,78,68,70,71,120,228,308,122',
'229,69,87,88,84,79,90,281,94,76,89,51,53,80,82,81,83,68,59,310,51,53',
'51,53,64,66,65,67,272,302,90,93,94,312,89,86,85,105,104,72,73,75,74',
'77,78,271,70,71,120,105,104,122,220,69,68,93,91,120,63,54,122,76,246',
'87,88,84,79,90,134,94,59,89,68,317,80,82,81,83,68,59,318,51,53,319,207',
'90,210,94,128,89,322,90,93,94,262,89,86,85,324,210,72,73,75,74,77,78',
'68,70,71,261,93,260,244,246,69,334,93,210,54,90,220,94,76,89,72,73,75',
'74,77,78,68,70,71,271,116,246,106,341,69,244,246,99,230,90,93,94,76',
'89,344,63,63,60,72,73,75,74,210,349,350,70,71,351,,,,,69,,93,,,,,,76',
',72,73,75,74,,,68,70,71,,,,,,69,87,88,84,79,90,,94,76,89,,,80,82,81',
'83,68,,,,,,,,,,,,79,90,93,94,,89,86,85,80,,72,73,75,74,77,78,68,70,71',
',,,,,69,,93,,,90,,94,76,89,72,73,75,74,77,78,68,70,71,,,,,,69,87,88',
'84,79,90,93,94,76,89,,,80,82,81,83,68,,,,,70,71,,,,,,69,90,93,94,,89',
'86,85,68,,72,73,75,74,77,78,,70,71,84,79,90,,94,69,89,93,,80,82,81,83',
'76,,,,,,,,,70,71,,,,93,,69,,,,68,,72,73,75,74,77,78,,70,71,84,79,90',
',94,69,89,68,,80,82,81,83,76,,,,,,,90,,94,,89,,,93,,,,,85,,,72,73,75',
'74,77,78,,70,71,,93,,,,69,,,,,,75,74,76,,68,70,71,,,,,,69,87,88,84,79',
'90,,94,76,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77',
'78,68,70,71,,,,,,69,87,88,84,79,90,,94,76,89,,,80,82,81,83,,,,,,,,,',
',,,,,93,,,,86,85,,,72,73,75,74,77,78,68,70,71,,,,,,69,87,88,84,79,90',
',94,76,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78',
'68,70,71,,,,,,69,87,88,84,79,90,,94,76,89,,,80,82,81,83,,,,,,,,,,,,',
',,93,,,,86,85,,,72,73,75,74,77,78,68,70,71,,,238,,,69,87,88,84,79,90',
',94,76,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78',
'68,70,71,,,,,,69,87,88,84,79,90,,94,76,89,,,80,82,81,83,,,,,,,,,,,,',
',,93,,,,86,85,,,72,73,75,74,77,78,68,70,71,,,,,,69,87,88,84,79,90,242',
'94,76,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78',
'68,70,71,,,,,,69,87,88,84,79,90,,94,76,89,,,80,82,81,83,,,,,,,,,,,,',
',,93,,,,86,85,,,72,73,75,74,77,78,68,70,71,,,,,,69,87,88,84,79,90,,94',
'76,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70',
'71,,,,,,69,68,,216,,,,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,',
',,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,215,,,',
',76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85',
',,72,73,75,74,77,78,,70,71,,,,,,69,68,,210,,,,,76,,87,88,84,79,90,,94',
',89,,,80,82,81,83,,,,,,,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,,70',
'71,,,,,,69,68,,210,,,,,76,,87,88,84,79,90,,94,,89,,,80,82,81,83,,,,',
',,,,,,,,,,93,,,,86,85,,,72,73,75,74,77,78,68,70,71,,,,,,69,87,88,84',
'79,90,,94,76,89,,197,80,82,81,83,68,,,,,,,,,,,,79,90,93,94,,89,86,85',
'80,,72,73,75,74,77,78,,70,71,,,,,,69,,93,51,53,,68,47,76,48,72,73,75',
'74,77,78,,70,71,90,,94,,89,69,13,,,,,,38,76,44,,46,96,,45,58,54,,40',
'57,93,,,55,12,,,56,51,53,11,,47,,48,70,71,,59,,,,69,,39,,,167,,,13,',
',,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,',
',59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,170,187,181,188,46,182,190,183',
'179,177,,172,185,,,,55,12,191,186,184,51,53,11,,47,,48,,,,59,,,,,189',
'171,,,,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,',
',55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,',
'45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
'199,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,',
',,,,,59,,,,,,39,,,13,,,,,,170,187,181,188,46,182,190,183,179,177,,172',
'185,,,,55,12,191,186,184,51,53,11,,47,,48,,,,59,,,,,189,171,,,,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,275',
',,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12',
'51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,209,,,,,38,,44,,46,96,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,',
',,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56',
',47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57',
'43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,269',
',,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12',
'51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54',
',40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,',
'44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,',
',39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11',
'48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12',
'51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54',
',40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,',
',56,51,53,11,,47,126,48,,,,59,,,,,,39,,,,,,13,,,,,,38,,44,,46,96,,45',
'58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,',
'38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,330,,,,,',
'59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56',
',47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57',
',,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96',
',45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,',
',,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,',
',59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,61,40',
'57,43,,,55,12,51,53,56,,47,11,48,346,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,',
'39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,,,56,51,53,11',
',47,301,48,,,,59,,,,,,39,,,,,,13,,,,,,38,,44,,46,96,,45,58,54,,40,57',
',,,55,12,,,56,,,11,,,,256,187,255,188,59,253,190,257,251,250,39,252',
'254,,,,,,191,186,258,256,187,255,188,,253,190,257,251,250,,252,254,',
',189,259,,191,186,258,256,187,255,188,,253,190,257,251,250,,252,254',
',,189,259,,191,186,258,,,,,,,,,,,,,,,,189,259' ]
        racc_action_table = arr = ::Array.new(4448, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'157,105,42,184,118,71,71,291,211,281,211,291,157,157,291,157,180,157',
'185,208,157,179,70,70,156,220,225,225,118,42,317,317,208,42,220,105',
'156,156,157,156,141,156,71,184,156,141,157,157,157,157,157,157,155,157',
'157,212,180,212,185,70,157,179,156,225,71,155,225,155,157,155,156,156',
'156,156,156,156,221,156,156,283,148,70,96,125,156,225,96,283,125,218',
'155,177,156,148,97,148,217,148,155,155,155,155,155,155,321,155,155,97',
'103,97,104,97,155,321,321,321,321,321,148,321,155,321,45,45,321,321',
'321,321,148,148,214,177,97,148,148,181,92,182,90,181,148,182,321,133',
'133,44,321,321,148,44,321,321,321,321,321,321,315,321,321,45,127,239',
'45,127,321,315,315,315,315,315,213,315,321,315,183,183,315,315,315,315',
'95,45,243,223,223,229,229,7,7,7,7,207,229,95,315,95,245,95,315,315,36',
'36,315,315,315,315,315,315,205,315,315,183,199,199,183,113,315,10,95',
'10,223,62,229,223,315,249,10,10,10,10,10,60,10,183,10,142,263,10,10',
'10,10,154,223,268,48,48,270,271,142,200,142,48,142,274,154,10,154,198',
'154,10,10,278,222,10,10,10,10,10,10,153,10,10,196,142,194,286,287,10',
'288,154,289,48,153,117,153,10,153,154,154,154,154,154,154,152,154,154',
'293,43,174,37,307,154,173,309,35,130,152,153,152,154,152,316,135,5,1',
'153,153,153,153,328,332,333,153,153,340,,,,,153,,152,,,,,,153,,152,152',
'152,152,,,314,152,152,,,,,,152,314,314,314,314,314,,314,152,314,,,314',
'314,314,314,159,,,,,,,,,,,,159,159,314,159,,159,314,314,159,,314,314',
'314,314,314,314,151,314,314,,,,,,314,,159,,,151,,151,314,151,159,159',
'159,159,159,159,306,159,159,,,,,,159,306,306,306,306,306,151,306,159',
'306,,,306,306,306,306,150,,,,,151,151,,,,,,151,150,306,150,,150,306',
'306,160,,306,306,306,306,306,306,,306,306,160,160,160,,160,306,160,150',
',160,160,160,160,306,,,,,,,,,150,150,,,,160,,150,,,,161,,160,160,160',
'160,160,160,,160,160,161,161,161,,161,160,161,147,,161,161,161,161,160',
',,,,,,147,,147,,147,,,161,,,,,161,,,161,161,161,161,161,161,,161,161',
',147,,,,161,,,,,,147,147,161,,304,147,147,,,,,,147,304,304,304,304,304',
',304,147,304,,,304,304,304,304,,,,,,,,,,,,,,,304,,,,304,304,,,304,304',
'304,304,304,304,300,304,304,,,,,,304,300,300,300,300,300,,300,304,300',
',,300,300,300,300,,,,,,,,,,,,,,,300,,,,300,300,,,300,300,300,300,300',
'300,162,300,300,,,,,,300,162,162,162,162,162,,162,300,162,,,162,162',
'162,162,,,,,,,,,,,,,,,162,,,,162,162,,,162,162,162,162,162,162,163,162',
'162,,,,,,162,163,163,163,163,163,,163,162,163,,,163,163,163,163,,,,',
',,,,,,,,,,163,,,,163,163,,,163,163,163,163,163,163,164,163,163,,,164',
',,163,164,164,164,164,164,,164,163,164,,,164,164,164,164,,,,,,,,,,,',
',,,164,,,,164,164,,,164,164,164,164,164,164,131,164,164,,,,,,164,131',
'131,131,131,131,,131,164,131,,,131,131,131,131,,,,,,,,,,,,,,,131,,,',
'131,131,,,131,131,131,131,131,131,169,131,131,,,,,,131,169,169,169,169',
'169,169,169,131,169,,,169,169,169,169,,,,,,,,,,,,,,,169,,,,169,169,',
',169,169,169,169,169,169,124,169,169,,,,,,169,124,124,124,124,124,,124',
'169,124,,,124,124,124,124,,,,,,,,,,,,,,,124,,,,124,124,,,124,124,124',
'124,124,124,193,124,124,,,,,,124,193,193,193,193,193,,193,124,193,,',
'193,193,193,193,,,,,,,,,,,,,,,193,,,,193,193,,,193,193,193,193,193,193',
',193,193,,,,,,193,111,,111,,,,,193,,111,111,111,111,111,,111,,111,,',
'111,111,111,111,,,,,,,,,,,,,,,111,,,,111,111,,,111,111,111,111,111,111',
',111,111,,,,,,111,110,,110,,,,,111,,110,110,110,110,110,,110,,110,,',
'110,110,110,110,,,,,,,,,,,,,,,110,,,,110,110,,,110,110,110,110,110,110',
',110,110,,,,,,110,109,,109,,,,,110,,109,109,109,109,109,,109,,109,,',
'109,109,109,109,,,,,,,,,,,,,,,109,,,,109,109,,,109,109,109,109,109,109',
',109,109,,,,,,109,107,,107,,,,,109,,107,107,107,107,107,,107,,107,,',
'107,107,107,107,,,,,,,,,,,,,,,107,,,,107,107,,,107,107,107,107,107,107',
'98,107,107,,,,,,107,98,98,98,98,98,,98,107,98,,98,98,98,98,98,158,,',
',,,,,,,,,158,158,98,158,,158,98,98,158,,98,98,98,98,98,98,,98,98,,,',
',,98,,158,89,89,,149,89,98,89,158,158,158,158,158,158,,158,158,149,',
'149,,149,158,89,,,,,,89,158,89,,89,89,,89,89,89,,89,89,149,,,89,89,',
',89,84,84,89,,84,,84,149,149,,89,,,,149,,89,,,89,,,84,,,,,,84,,84,,84',
'84,,84,84,84,,84,84,,,,84,84,247,247,84,,247,84,247,,,,,,,84,,,,,,84',
',,247,,,,,,247,,247,,247,247,,247,247,247,,247,247,,,,247,247,244,244',
'247,,244,247,244,,,,,,,247,,,,,,247,,,244,,,,,,244,,244,,244,244,,244',
'244,244,,244,244,,,,244,244,72,72,244,,72,244,72,,,,,,,244,,,,,,244',
',,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,,,,72,72,73,73,72,,73,72,73',
',,,,,,72,,,,,,72,,,73,,,,,,73,,73,,73,73,,73,73,73,,73,73,,,,73,73,74',
'74,73,,74,73,74,,,,,,,73,,,,,,73,,,74,,,,,,74,,74,,74,74,,74,74,74,',
'74,74,,,,74,74,75,75,74,,75,74,75,,,,,,,74,,,,,,74,,,75,,,,,,75,,75',
',75,75,,75,75,75,,75,75,,,,75,75,76,76,75,,76,75,76,,,,,,,75,,,,,,75',
',,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,,,,76,76,77,77,76,,77,76,77',
',,,,,,76,,,,,,76,,,77,,,,,,77,,77,,77,77,,77,77,77,,77,77,,,,77,77,78',
'78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,,,,,,78,,78,,78,78,,78,78,78,',
'78,78,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,,,78,,,79,,,,,,79,,79',
',79,79,,79,79,79,,79,79,,,,79,79,80,80,79,,80,79,80,,,,,,,79,,,,,,79',
',,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,80,80,81,81,80,,81,80,81',
',,,,,,80,,,,,,80,,,81,,,,,,81,,81,,81,81,,81,81,81,,81,81,,,,81,81,82',
'82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,,,,,,82,,82,,82,82,,82,82,82,',
'82,82,,,,82,82,83,83,82,,83,82,83,,,,,,,82,,,,,,82,,,83,,,,,,83,,83',
',83,83,,83,83,83,,83,83,,,,83,83,69,69,83,,69,83,69,,,,,,,83,,,,,,83',
',,69,,,,,,69,,69,,69,69,,69,69,69,,69,69,,,,69,69,85,85,69,,85,69,85',
',,,,,,69,,,,,,69,,,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,85,85,86',
'86,85,,86,85,86,,,,,,,85,,,,,,85,,,86,,,,,,86,,86,,86,86,,86,86,86,',
'86,86,,,,86,86,87,87,86,,87,86,87,,,,,,,86,,,,,,86,,,87,,,,,,87,,87',
',87,87,,87,87,87,,87,87,,,,87,87,88,88,87,,88,87,88,,,,,,,87,,,,,,87',
',,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,88,88,68,68,88,,68,88,68',
',,,,,,88,,,,,,88,,,68,,,,,,68,,68,,68,68,,68,68,68,,68,68,,,,68,68,238',
'238,68,,238,68,238,,,,,,,68,,,,,,68,,,238,,,,,,238,,238,,238,238,,238',
'238,238,,238,238,,,,238,238,91,91,238,,91,238,91,,,,,,,238,,,,,,238',
',,91,,,,,,91,91,91,91,91,91,91,91,91,91,,91,91,,,,91,91,91,91,91,237',
'237,91,,237,,237,,,,91,,,,,91,91,,,,,,237,,,,,,237,,237,,237,237,,237',
'237,237,,237,237,,,,237,237,93,93,237,,93,237,93,,,,,,,237,,,,,,237',
',,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,93,93,94,94,93,,94,93,94',
',,,,,,93,,,,,,93,,,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,,,,94,94,235',
'235,94,,235,94,235,,,,,,,94,,,,,,94,,,235,,,,,,235,,235,,235,235,,235',
'235,235,,235,235,,,,235,235,230,230,235,,230,235,230,,,,,,,235,,,,,',
'235,,,230,,,,,,230,,230,,230,230,,230,230,230,,230,230,,,,230,230,67',
'67,230,,67,230,67,,,,,,,230,,,,,,230,,,67,,,,,,67,,67,,67,67,,67,67',
'67,,67,67,67,,,67,67,66,66,67,,66,67,66,,,,,,,67,,,,,,67,,,66,,,,,,66',
',66,,66,66,,66,66,66,,66,66,66,,,66,66,99,99,66,,99,66,99,,,,,,,66,',
',,,,66,,,99,99,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,99,99,216,216,99',
',216,99,216,,,,,,,99,,,,,,99,,,216,,,,,,216,216,216,216,216,216,216',
'216,216,216,,216,216,,,,216,216,216,216,216,215,215,216,,215,,215,,',
',216,,,,,216,216,,,,,,215,,,,,,215,,215,,215,215,,215,215,215,,215,215',
',,,215,215,210,210,215,,210,215,210,210,,,,,,215,,,,,,215,,,210,,,,',
',210,,210,,210,210,,210,210,210,,210,210,210,,,210,210,106,106,210,',
'106,210,106,,,,,,,210,,,,,,210,,,106,106,,,,,106,,106,,106,106,,106',
'106,106,,106,106,,,,106,106,65,65,106,,65,106,65,,,,,,,106,,,,,,106',
',,65,,,,,,65,,65,,65,65,,65,65,65,,65,65,65,,,65,65,64,64,65,,64,65',
'64,,,,,,,65,,,,,,65,,,64,,,,,,64,,64,,64,64,,64,64,64,,64,64,64,,,64',
'64,63,63,64,,63,64,63,,,,,,,64,,,,,,64,,,63,,,,,,63,,63,,63,63,,63,63',
'63,,63,63,63,,,63,63,248,248,63,,248,63,248,,,,,,,63,,,,,,63,,,248,',
',,,,248,,248,,248,248,,248,248,248,,248,248,,,,248,248,112,112,248,',
'112,248,112,,,,,,,248,,,,,,248,,,112,,,,,,112,,112,,112,112,,112,112',
'112,,112,112,,,,112,112,203,203,112,,203,112,203,203,,,,,,112,,,,,,112',
',,203,,,,,,203,,203,,203,203,,203,203,203,,203,203,203,,,203,203,61',
'61,203,,61,203,61,,,,,,,203,,,,,,203,,,61,,,,,,61,,61,,61,61,,61,61',
'61,,61,61,61,,,61,61,172,172,61,,172,61,172,,,,,,,61,,,,,,61,,,172,',
',,,,172,,172,,172,172,,172,172,172,,172,172,,,,172,172,262,262,172,',
'262,172,262,,,,,,,172,,,,,,172,,,262,,,,,,262,,262,,262,262,,262,262',
'262,,262,262,,,,262,262,171,171,262,,171,262,171,,,,,,,262,,,,,,262',
',,171,,,,,,171,,171,,171,171,,171,171,171,,171,171,,,,171,171,170,170',
'171,,170,171,170,,,,,,,171,,,,,,171,,,170,,,,,,170,,170,,170,170,,170',
'170,170,,170,170,,,,170,170,52,52,170,,52,170,52,,,,,,,170,,,,,,170',
',,52,,,,,,52,,52,,52,52,,52,52,52,,52,52,,,,52,52,272,272,52,,272,52',
'272,,,,,,,52,,,,,,52,,,272,,,,,,272,,272,,272,272,,272,272,272,,272',
'272,,,,272,272,167,167,272,,167,272,167,,,,,,,272,,,,,,272,,,167,,,',
',,167,,167,,167,167,,167,167,167,,167,167,,,,167,167,,,167,47,47,167',
',47,47,47,,,,167,,,,,,167,,,,,,47,,,,,,47,,47,,47,47,,47,47,47,,47,47',
',,,47,47,277,277,47,,277,47,277,,,,,,,47,,,,,,47,,,277,,,,,,277,,277',
',277,277,,277,277,277,,277,277,,,,277,277,284,284,277,,284,277,284,284',
',,,,,277,,,,,,277,,,284,,,,,,284,,284,,284,284,,284,284,284,,284,284',
',,,284,284,41,41,284,,41,284,41,,,,,,,284,,,,,,284,,,41,,,,,,41,,41',
',41,41,,41,41,41,,41,41,,,,41,41,40,40,41,,40,41,40,,,,,,,41,,,,,,41',
',,40,,,,,,40,,40,,40,40,,40,40,40,,40,40,,,,40,40,39,39,40,,39,40,39',
',,,,,,40,,,,,,40,,,39,,,,,,39,,39,,39,39,,39,39,39,,39,39,,,,39,39,38',
'38,39,,38,39,38,,,,,,,39,,,,,,39,,,38,,,,,,38,,38,,38,38,,38,38,38,',
'38,38,,,,38,38,308,308,38,,308,38,308,,,,,,,38,,,,,,38,,,308,,,,,,308',
',308,,308,308,,308,308,308,,308,308,,,,308,308,13,13,308,,13,308,13',
',,,,,,308,,,,,,308,,,13,,,,,,13,,13,,13,13,,13,13,13,,13,13,,,,13,13',
'12,12,13,,12,13,12,,,,,,,13,,,,,,13,,,12,,,,,,12,,12,,12,12,,12,12,12',
',12,12,,,,12,12,11,11,12,,11,12,11,,,,,,,12,,,,,,12,,,11,,,,,,11,,11',
',11,11,,11,11,11,,11,11,,,,11,11,4,4,11,,4,11,4,,,,,,,11,,,,,,11,,,4',
',,,,,4,,4,,4,4,,4,4,4,4,4,4,4,,,4,4,324,324,4,,324,4,324,324,,,,,,4',
',,,,,4,,,324,,,,,,324,,324,,324,324,,324,324,324,,324,324,324,,,324',
'324,0,0,324,,0,324,0,,,,,,,324,,,,,,324,,,0,,,,,,0,,0,,0,0,,0,0,0,,0',
'0,0,,,0,0,,,0,226,226,0,,226,226,226,,,,0,,,,,,0,,,,,,226,,,,,,226,',
'226,,226,226,,226,226,226,,226,226,,,,226,226,,,226,,,226,,,,192,192',
'192,192,226,192,192,192,192,192,226,192,192,,,,,,192,192,192,241,241',
'241,241,,241,241,241,241,241,,241,241,,,192,192,,241,241,241,246,246',
'246,246,,246,246,246,246,246,,246,246,,,241,241,,246,246,246,,,,,,,',
',,,,,,,,246,246' ]
        racc_action_check = arr = ::Array.new(4448, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4262,   314,   nil,   nil,  4170,   301,   nil,   125,   nil,   nil,
   211,  4124,  4078,  4032,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   280,   132,   275,  3940,  3894,
  3848,  3802,    -6,   254,   110,   120,   nil,  3664,   242,   nil,
   nil,   nil,  3523,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   231,  3293,   209,  3109,  3063,  3017,  2738,  2692,  2321,  2091,
    20,     3,  1539,  1585,  1631,  1677,  1723,  1769,  1815,  1861,
  1907,  1953,  1999,  2045,  1401,  2137,  2183,  2229,  2275,  1352,
    99,  2413,   128,  2508,  2554,   174,    47,    88,  1285,  2784,
   nil,   nil,   nil,    97,    42,   -33,  2971,  1233,   nil,  1172,
  1111,  1050,  3201,   191,   nil,   nil,   nil,   259,    -8,   nil,
   nil,   nil,   nil,   nil,   937,    76,   nil,   151,   nil,   nil,
   294,   833,   nil,   139,   nil,   300,   nil,   nil,   nil,   nil,
   nil,    33,   229,   nil,   nil,   nil,   nil,   521,    74,  1351,
   439,   391,   287,   263,   235,    46,    18,    -6,  1309,   363,
   459,   503,   677,   729,   781,   nil,   nil,  3615,   nil,   885,
  3477,  3431,  3339,   262,   286,   nil,   nil,    80,   nil,    10,
     5,   100,   102,   172,    -8,     7,   nil,   nil,   nil,   nil,
   nil,   nil,  4338,   989,   229,   nil,   250,   nil,   245,   144,
   241,   nil,   nil,  3247,   nil,   196,   nil,   176,     7,   nil,
  2925,   -23,    24,   139,    99,  2879,  2830,    56,    53,   nil,
     0,    68,   254,   181,   nil,    24,  4311,   nil,   nil,   183,
  2646,   nil,   nil,   nil,   nil,  2600,   nil,  2462,  2367,   149,
   nil,  4359,   nil,   173,  1493,   187,  4380,  1447,  3155,   213,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  3385,   211,   nil,   nil,   nil,   nil,   234,   nil,
   178,   213,  3569,   nil,   244,   nil,   nil,  3710,   253,   nil,
   nil,     1,   nil,    67,  3756,   nil,   235,   264,   269,   272,
   nil,   -28,   nil,   284,   nil,   nil,   nil,   nil,   nil,   nil,
   625,   nil,   nil,   nil,   573,   nil,   415,   291,  3986,   291,
   nil,   nil,   nil,   nil,   339,   150,   302,   -38,   nil,   nil,
   nil,    98,   nil,   nil,  4216,   nil,   nil,   nil,   311,   nil,
   nil,   nil,   311,   312,   nil,   nil,   nil,   nil,   nil,   nil,
   299,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -211,  -212,    -1,    -2,    -5,    -6,    -9,   -11,   -12,   -17,
  -111,  -212,  -212,  -212,   -45,   -46,   -47,   -48,   -49,   -50,
   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,
   -61,   -62,   -63,   -64,   -65,   -70,   -71,   -75,  -212,  -212,
  -212,  -212,  -212,  -121,  -212,  -212,  -166,  -212,  -212,  -176,
  -177,  -178,  -212,  -180,  -187,  -188,  -189,  -190,  -191,  -192,
  -212,  -212,    -8,  -212,  -212,  -212,  -212,  -212,  -212,  -212,
  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,
  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,
  -212,  -129,  -124,  -211,  -211,   -29,  -212,   -36,  -212,  -212,
   -72,   -77,   -78,  -211,  -212,  -212,  -212,  -212,   -88,  -212,
  -212,  -212,  -212,  -211,  -155,  -156,  -122,  -211,  -211,  -147,
  -149,  -150,  -151,  -152,   -43,  -212,  -169,  -212,  -172,  -173,
  -212,  -184,  -179,  -212,   352,    -7,   -10,   -13,   -14,   -15,
   -16,  -212,   -19,   -20,  -164,  -165,   -21,   -22,   -23,   -24,
   -25,   -26,   -27,   -28,   -30,   -31,   -32,   -33,   -34,   -35,
   -37,   -38,   -39,   -40,  -212,   -41,  -106,  -212,   -76,  -212,
  -204,  -210,  -198,  -195,  -193,  -119,  -130,  -187,  -133,  -191,
  -212,  -201,  -199,  -207,  -189,  -190,  -197,  -202,  -203,  -205,
  -206,  -208,  -129,  -128,  -212,  -127,  -212,   -42,  -193,   -67,
  -212,   -82,   -83,  -212,   -86,  -193,  -160,  -163,  -212,   -74,
  -212,   -91,   -91,   -97,   -97,  -212,  -129,  -195,  -211,  -157,
  -212,  -212,  -212,  -212,  -153,  -212,  -212,  -167,  -170,  -212,
  -212,  -181,  -182,  -183,  -185,  -212,   -18,  -212,  -212,  -193,
  -108,  -129,  -118,  -212,  -196,  -212,  -194,  -212,  -212,  -193,
  -132,  -134,  -198,  -199,  -200,  -201,  -204,  -207,  -209,  -210,
  -125,  -126,  -194,  -212,   -69,   -79,   -80,   -81,  -212,   -85,
  -212,  -194,  -212,   -73,  -212,    -4,   -89,  -212,  -212,   -90,
   -95,  -212,   -96,  -212,  -212,  -101,  -195,  -193,  -212,  -212,
  -141,  -212,  -158,  -193,  -137,  -138,  -145,  -146,  -148,  -154,
   -44,  -168,  -171,  -174,  -175,  -186,  -110,  -212,  -194,  -193,
  -114,  -120,  -115,  -131,  -135,  -136,  -212,   -66,   -84,   -87,
  -161,  -162,    -3,   -92,  -212,   -93,   -98,   -99,  -212,  -105,
  -100,  -102,  -212,  -212,  -116,  -139,  -140,  -142,  -143,  -144,
  -212,  -107,  -109,  -117,  -123,   -68,   -94,  -103,  -104,  -112,
  -113,  -159 ]

racc_goto_table = [
    95,    97,    98,   100,   212,   117,   214,     2,   129,   211,
   132,   213,   166,   174,     3,   130,   245,   123,   173,   205,
   121,   218,   298,   285,   299,   221,   284,   107,   109,   110,
   111,   328,    62,   239,   125,   243,   124,   145,   145,   217,
   263,   131,   144,   144,   194,   196,   323,   270,   137,   138,
   139,   140,   276,   279,   311,   141,   241,   124,   142,   143,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   288,
   169,   307,   193,   193,   280,   282,   198,   265,   124,   135,
   240,   316,   331,   208,   313,   124,   200,   267,   203,   289,
   337,   169,   266,   222,   165,   320,   127,   136,     1,   234,
   235,   233,   nil,   nil,   249,   nil,   nil,   201,   295,   297,
   nil,   nil,   nil,   294,   296,   nil,   nil,   219,   nil,   333,
   nil,   219,   224,   nil,   293,   340,   nil,   nil,   287,   nil,
   nil,   nil,   117,   286,   nil,   nil,   nil,   nil,   332,   nil,
   nil,   343,   nil,   nil,   nil,   123,   164,   nil,   121,   107,
   109,   110,   nil,   309,   nil,   nil,   264,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   327,   nil,
   325,   nil,   nil,   326,   nil,   nil,   336,   nil,   nil,   303,
   nil,   335,   nil,   305,   nil,   123,   130,   123,   121,   nil,
   121,   nil,   nil,   nil,   124,   169,   nil,   nil,   nil,   nil,
   268,   nil,   nil,   nil,   nil,   300,   nil,   nil,   nil,   304,
   nil,   nil,   nil,   nil,   131,   348,   300,   306,   nil,   nil,
   347,   342,   290,   169,   nil,   nil,   314,   315,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   300,   338,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   321,   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,
   nil,   nil,   nil,   124,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   345,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164 ]

racc_goto_check = [
    11,    11,    11,    39,     5,    67,     5,     2,    76,     4,
    80,     4,    54,    59,     3,    33,    38,    32,    57,    47,
    37,    68,    73,    52,    73,    68,    51,    11,    11,    11,
    11,    53,     7,    55,    13,    58,    11,    33,    33,    57,
    38,    11,    32,    32,    63,    63,    48,    38,     9,     9,
     9,     9,    49,    49,    60,    13,    61,    11,    11,    14,
    14,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    58,
    11,    38,    11,    11,    50,    50,    13,    46,    11,     7,
    54,    38,    52,    13,    64,    11,    45,     5,    44,    69,
    70,    11,     4,    72,    15,    74,    75,     8,     1,    81,
    82,    84,   nil,   nil,    59,   nil,   nil,     3,     5,     5,
   nil,   nil,   nil,     4,     4,   nil,   nil,     3,   nil,    38,
   nil,     3,     3,   nil,    47,    38,   nil,   nil,    59,   nil,
   nil,   nil,    67,    57,   nil,   nil,   nil,   nil,    58,   nil,
   nil,    38,   nil,   nil,   nil,    32,    11,   nil,    37,    11,
    11,    11,   nil,    59,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,
     4,   nil,   nil,     4,   nil,   nil,     5,   nil,   nil,    76,
   nil,     4,   nil,    80,   nil,    32,    33,    32,    37,   nil,
    37,   nil,   nil,   nil,    11,    11,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,    11,
   nil,   nil,   nil,   nil,    11,     5,    11,    11,   nil,   nil,
     4,    54,     3,    11,   nil,   nil,    11,    11,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    11,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    11,   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11 ]

racc_goto_pointer = [
   nil,   108,     7,    14,   -98,  -103,   nil,    28,    44,   -16,
   nil,   -11,   nil,   -13,   -11,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -28,   -33,   nil,   nil,   nil,   -25,  -158,   -33,
   nil,   nil,   nil,   nil,    -6,    -7,  -113,   -86,  -231,  -159,
  -129,  -189,  -192,  -252,   -77,  -134,   nil,   -73,  -138,   -78,
  -190,  -113,   nil,   -49,  -152,   nil,   nil,   -39,   -92,  -119,
  -191,   nil,   -15,  -201,  -166,    58,   -40,   nil,   nil,   nil,
   -42,   -24,   -23,   nil,   -22 ]

racc_goto_default = [
   nil,   nil,   274,   195,   nil,   nil,     4,     5,     6,     7,
     8,    10,     9,   283,   nil,   nil,    14,    35,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,   nil,   nil,
    36,    37,   101,   102,   103,   nil,   nil,   nil,   108,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,
   175,   nil,    92,   nil,   176,   180,   178,   113,   nil,   nil,
   nil,   118,   nil,   119,   206,   nil,   nil,    49,    50,    52,
   nil,   nil,   nil,   133,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 78, :_reduce_1,
  1, 78, :_reduce_none,
  3, 81, :_reduce_3,
  2, 82, :_reduce_4,
  1, 79, :_reduce_5,
  1, 83, :_reduce_6,
  3, 83, :_reduce_7,
  2, 83, :_reduce_8,
  1, 84, :_reduce_9,
  3, 84, :_reduce_10,
  1, 85, :_reduce_none,
  1, 86, :_reduce_12,
  3, 86, :_reduce_13,
  3, 86, :_reduce_14,
  3, 86, :_reduce_15,
  3, 86, :_reduce_16,
  1, 88, :_reduce_none,
  4, 88, :_reduce_18,
  3, 88, :_reduce_19,
  3, 88, :_reduce_20,
  3, 88, :_reduce_21,
  3, 88, :_reduce_22,
  3, 88, :_reduce_23,
  3, 88, :_reduce_24,
  3, 88, :_reduce_25,
  3, 88, :_reduce_26,
  3, 88, :_reduce_27,
  3, 88, :_reduce_28,
  2, 88, :_reduce_29,
  3, 88, :_reduce_30,
  3, 88, :_reduce_31,
  3, 88, :_reduce_32,
  3, 88, :_reduce_33,
  3, 88, :_reduce_34,
  3, 88, :_reduce_35,
  2, 88, :_reduce_36,
  3, 88, :_reduce_37,
  3, 88, :_reduce_38,
  3, 88, :_reduce_39,
  3, 88, :_reduce_40,
  3, 88, :_reduce_41,
  3, 88, :_reduce_42,
  1, 90, :_reduce_43,
  3, 90, :_reduce_44,
  1, 89, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 110, :_reduce_64,
  1, 110, :_reduce_65,
  5, 93, :_reduce_66,
  3, 93, :_reduce_67,
  6, 93, :_reduce_68,
  4, 93, :_reduce_69,
  1, 93, :_reduce_70,
  1, 97, :_reduce_71,
  2, 97, :_reduce_72,
  4, 117, :_reduce_73,
  3, 117, :_reduce_74,
  1, 117, :_reduce_75,
  3, 118, :_reduce_76,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  3, 119, :_reduce_79,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  4, 120, :_reduce_84,
  3, 120, :_reduce_85,
  2, 121, :_reduce_86,
  4, 121, :_reduce_87,
  2, 100, :_reduce_88,
  3, 125, :_reduce_89,
  3, 125, :_reduce_90,
  0, 126, :_reduce_none,
  2, 126, :_reduce_92,
  2, 126, :_reduce_93,
  3, 126, :_reduce_94,
  4, 101, :_reduce_95,
  4, 101, :_reduce_96,
  0, 127, :_reduce_none,
  2, 127, :_reduce_98,
  2, 127, :_reduce_99,
  5, 99, :_reduce_100,
  1, 128, :_reduce_101,
  2, 128, :_reduce_102,
  3, 129, :_reduce_103,
  3, 129, :_reduce_104,
  1, 130, :_reduce_105,
  1, 92, :_reduce_none,
  4, 92, :_reduce_107,
  1, 132, :_reduce_108,
  3, 132, :_reduce_109,
  3, 131, :_reduce_110,
  1, 87, :_reduce_111,
  6, 87, :_reduce_112,
  6, 87, :_reduce_113,
  5, 87, :_reduce_114,
  5, 87, :_reduce_115,
  5, 87, :_reduce_116,
  4, 137, :_reduce_117,
  1, 138, :_reduce_118,
  1, 134, :_reduce_119,
  3, 134, :_reduce_120,
  1, 133, :_reduce_121,
  2, 133, :_reduce_122,
  6, 98, :_reduce_123,
  2, 98, :_reduce_124,
  3, 139, :_reduce_125,
  3, 139, :_reduce_126,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  0, 136, :_reduce_129,
  1, 136, :_reduce_130,
  3, 136, :_reduce_131,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  3, 141, :_reduce_135,
  3, 141, :_reduce_136,
  4, 102, :_reduce_137,
  4, 102, :_reduce_138,
  5, 103, :_reduce_139,
  5, 103, :_reduce_140,
  1, 146, :_reduce_none,
  2, 146, :_reduce_142,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  4, 104, :_reduce_145,
  4, 104, :_reduce_146,
  1, 148, :_reduce_147,
  3, 148, :_reduce_148,
  1, 150, :_reduce_149,
  1, 150, :_reduce_150,
  1, 150, :_reduce_151,
  1, 150, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_154,
  1, 144, :_reduce_155,
  1, 144, :_reduce_156,
  1, 145, :_reduce_157,
  2, 145, :_reduce_158,
  4, 145, :_reduce_159,
  1, 124, :_reduce_160,
  3, 124, :_reduce_161,
  3, 151, :_reduce_162,
  1, 151, :_reduce_163,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 96, :_reduce_166,
  3, 105, :_reduce_167,
  4, 105, :_reduce_168,
  2, 105, :_reduce_169,
  3, 108, :_reduce_170,
  4, 108, :_reduce_171,
  2, 108, :_reduce_172,
  1, 152, :_reduce_173,
  3, 152, :_reduce_174,
  3, 153, :_reduce_175,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 154, :_reduce_178,
  2, 155, :_reduce_179,
  1, 156, :_reduce_180,
  1, 158, :_reduce_181,
  1, 159, :_reduce_182,
  2, 157, :_reduce_183,
  1, 160, :_reduce_184,
  1, 161, :_reduce_185,
  2, 161, :_reduce_186,
  1, 113, :_reduce_187,
  1, 111, :_reduce_188,
  1, 112, :_reduce_189,
  1, 107, :_reduce_190,
  1, 106, :_reduce_191,
  1, 109, :_reduce_192,
  0, 115, :_reduce_none,
  1, 115, :_reduce_194,
  0, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  0, 80, :_reduce_211 ]

racc_reduce_n = 212

racc_shift_n = 352

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :LAMBDA => 69,
  :SELBRACE => 70,
  :LOW => 71,
  :HIGH => 72,
  :CALL => 73,
  :MODULO => 74,
  :TITLE_COLON => 75,
  :CASE_COLON => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "block",
  "empty_block",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_j8",
  "lambda_ruby",
  "lambda_parameter_list",
  "optional_farrow",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 57)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 61)
  def _reduce_3(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 64)
  def _reduce_4(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_5(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_6(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_10(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_16(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_18(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_19(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_20(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_21(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_22(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_23(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_24(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_25(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_26(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_27(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_28(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_29(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_30(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_31(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_32(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_33(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_34(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_35(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_36(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_37(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_38(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_39(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_40(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 131)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'egrammar.ra', 161)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 162)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 170)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 174)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_72(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_76(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_79(val, _values, result)
          result = Factory.LAMBDA(val[0], val[2])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_84(val, _values, result)
          result = Factory.LAMBDA(val[1], val[2])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 238)
  def _reduce_85(val, _values, result)
          result = Factory.LAMBDA(val[1], nil)
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 244)
  def _reduce_86(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 245)
  def _reduce_87(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_88(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_89(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[1]), val[2])
        loc(result, val[0], (val[2] ? val[2] : val[1]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = Factory.IF(val[0], nil, val[2])
        loc(result, val[0], (val[2] ? val[2] : val[1]))
      
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_92(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_93(val, _values, result)
            result = Factory.block_or_expression(*val[1])
        loc result, val[0], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_94(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_95(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[2]), val[3])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_96(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[3]
    
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_98(val, _values, result)
            result = Factory.block_or_expression(*val[1])
        loc result, val[0], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_99(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_100(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_101(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_102(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_103(val, _values, result)
            result = Factory.WHEN(val[0], val[2])
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_104(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_107(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_109(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_110(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_111(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error "A resource default can not be virtual or exported"
      when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 393)
  def _reduce_113(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_114(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error "A resource default can not specify a resource name"
      when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_115(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_116(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_117(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_118(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_121(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_122(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 472)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 485)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 486)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 517)
  def _reduce_137(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[3])
      loc result, val[0], val[3]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 522)
  def _reduce_138(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[3]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_139(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[4])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 542)
  def _reduce_140(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[3]
      
    result
  end
.,.,

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 550)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_145(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[3])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_146(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_147(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_149(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_151(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_155(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_156(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_157(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_160(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_161(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_162(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_163(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_166(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_168(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_169(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_170(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_171(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_172(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_173(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_174(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_175(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_179(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_182(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_183(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_184(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_185(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_186(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_187(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_188(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_189(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_190(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_191(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 193 omitted

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_194(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_211(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
