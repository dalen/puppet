#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 803)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'10,15,201,202,204,211,-131,103,211,105,83,167,171,54,294,169,173,55',
'160,81,82,182,106,-200,164,166,170,172,39,205,47,1,30,11,14,30,20,25',
'35,181,44,49,3,10,15,16,102,165,168,33,337,175,176,158,159,161,162,335',
'167,171,30,-131,-131,-131,-131,160,9,163,10,15,314,39,182,47,1,188,11',
'14,103,20,25,35,343,44,49,3,10,15,16,213,181,295,33,400,334,-181,379',
'308,309,333,211,169,173,30,380,215,186,285,322,9,164,166,170,172,39',
'375,47,1,373,11,14,323,20,25,35,361,44,49,3,10,15,16,121,165,168,33',
'398,175,176,158,159,161,162,-113,167,171,30,10,15,308,309,160,9,163',
'351,293,181,39,292,47,1,-124,11,14,213,20,25,35,213,44,49,3,10,15,16',
'211,181,332,33,211,215,318,54,317,215,186,55,169,173,30,285,310,315',
'16,258,9,164,166,170,172,39,302,47,1,348,11,14,54,20,25,35,55,44,49',
'3,10,15,16,213,165,168,33,325,175,176,158,159,161,162,211,167,171,30',
'100,215,285,369,160,9,163,297,-187,304,39,93,47,1,339,11,14,303,20,25',
'35,-188,44,49,3,10,15,16,54,67,122,33,55,167,171,356,-182,345,167,171',
'160,-97,30,10,15,160,349,67,9,96,285,310,99,150,152,155,126,128,59,133',
'136,139,140,146,375,153,156,373,10,15,16,30,138,143,147,281,59,93,288',
'-183,25,237,285,286,49,30,10,15,16,324,127,130,33,285,286,346,39,260',
'47,1,-181,11,14,30,20,25,35,-130,44,49,3,10,15,16,-180,96,311,33,99',
'59,285,310,307,25,237,308,309,49,30,10,15,16,258,353,9,33,257,30,256',
'39,254,47,1,250,11,14,30,20,25,35,248,44,49,3,10,15,16,242,315,364,33',
'397,59,105,366,221,25,237,209,123,49,30,10,15,16,372,-123,9,33,122,-189',
'376,39,-184,47,1,-182,11,14,30,20,25,35,-185,44,49,3,10,15,16,250,383',
'384,33,387,59,258,-183,-180,25,237,-187,83,49,30,10,15,16,388,-186,9',
'33,378,123,93,39,389,47,1,122,11,14,30,20,25,35,-231,44,49,3,10,15,16',
'121,391,-182,33,357,59,393,-183,109,25,237,396,107,49,30,101,57,16,56',
'96,9,33,99,402,403,39,,47,1,,11,14,30,20,25,35,,44,49,3,246,30,16,,',
',33,,,169,173,86,87,88,84,,,30,164,166,170,172,,9,175,176,158,159,161',
'162,,167,171,-40,-40,-40,-40,,160,,163,165,168,173,,175,176,158,159',
'161,162,164,167,171,174,-44,-44,-44,-44,160,,163,,169,173,86,87,88,84',
',,,164,166,170,172,,,175,176,158,159,161,162,,167,171,-38,-38,-38,-38',
',160,,163,165,168,,,175,176,158,159,161,162,,167,171,247,,,,,160,,163',
',169,173,,,,,,,,164,166,170,172,,,175,176,158,159,,10,15,167,171,67',
'180,73,,,160,,163,165,168,,,175,176,158,159,161,162,60,167,171,10,15',
',,115,160,-200,163,59,,,,25,70,,,49,,,,16,64,114,,33,10,15,78,,67,,73',
',59,,30,,25,70,,,49,10,15,,16,67,60,73,33,,,,,,,,,59,,30,,25,70,60,',
'49,,,,16,64,,,33,59,,78,,25,70,,,49,,30,,16,64,10,15,33,,67,78,73,,',
',10,15,,30,67,,73,,,,10,15,60,,67,,73,,,,,,60,59,,,,25,70,,,49,60,59',
',16,64,25,70,33,,49,78,59,,16,64,25,70,33,30,49,78,,,16,64,10,15,33',
'30,67,78,73,,,,10,15,,30,67,,73,,,,10,15,60,290,67,,73,,,,,,60,59,,',
',25,70,,,49,60,59,,16,64,25,70,33,,49,78,59,,16,64,25,70,33,30,49,78',
',,16,64,10,15,33,30,67,78,73,,,,10,15,,30,67,,73,,,,10,15,60,,67,,73',
',,,,,60,59,,,,25,70,,,49,60,59,,16,64,25,70,33,,49,78,59,,16,64,25,70',
'33,30,49,78,,,16,64,10,15,33,30,67,78,73,,,,10,15,,30,67,,73,,,,10,15',
'60,,67,,73,,,,,,60,59,,,,25,70,,,49,60,59,,16,64,25,70,33,,49,78,59',
',16,64,25,70,33,30,49,78,,,16,64,10,15,33,30,67,78,73,,,,10,15,,30,67',
',73,,,,10,15,60,,67,,73,,,,,,60,59,,,,25,70,,,49,60,59,,16,64,25,70',
'33,,49,78,59,,16,64,25,70,33,30,49,78,,,16,64,10,15,33,30,67,78,73,',
',,10,15,,30,67,,73,,,,10,15,60,,67,,73,,,,,,60,59,,,,25,70,,,49,60,59',
',16,64,25,70,33,,49,78,59,,16,64,25,70,33,30,49,78,,,16,64,10,15,33',
'30,67,78,73,,,,10,15,,30,67,,73,,,,10,15,60,,67,,73,,,,,,60,59,,,,25',
'70,,,49,60,59,,16,64,25,70,33,,49,78,59,,16,64,25,70,33,30,49,78,,,16',
'64,10,15,33,30,67,78,73,,,,10,15,,30,,,,,,,10,15,60,,67,,73,,,,,,,59',
',,,25,70,,,49,60,59,54,16,64,25,197,33,44,49,78,59,,16,,25,70,33,30',
'49,10,15,,16,64,,,33,30,,78,,,10,15,158,159,67,30,73,167,171,,,,,,160',
',163,,,,59,54,60,,25,197,,44,49,,10,15,16,59,67,,33,25,70,,,49,,,,16',
'64,30,,33,10,15,78,,67,,73,,,,30,,,59,,,,25,70,,,49,60,,,16,10,15,,33',
'67,,73,59,,,,25,70,,30,49,,,,16,64,,60,33,,,78,,175,176,158,159,,59',
'30,167,171,25,70,,,49,160,,163,16,64,10,15,33,,67,78,73,,,,10,15,,30',
'67,,73,,,,10,15,60,,67,,73,,,,,,60,59,,,,25,70,,,49,60,59,,16,64,25',
'70,33,,49,78,59,,16,64,25,70,33,30,49,78,,,16,64,10,15,33,30,67,78,73',
',,,10,15,,30,67,,73,,,,10,15,60,,,,239,,,,158,159,60,59,,167,171,25',
'70,,,49,160,59,163,16,64,25,70,33,,49,78,59,,16,64,25,237,33,30,49,78',
',,16,,10,15,33,30,67,,73,,,,10,15,,30,67,,73,,,,,,60,,,,,,,,,,60,59',
',,,25,70,,,49,,59,,16,64,25,70,33,,49,78,,,16,64,10,15,33,30,67,78,73',
',,,10,15,,30,67,180,73,,,,10,15,60,244,67,,73,,,,10,15,60,59,67,,,25',
'70,,,49,60,59,,16,64,25,70,33,,49,78,59,,16,64,25,70,33,30,49,78,59',
',16,64,25,70,33,30,49,78,10,15,16,,,,33,30,,10,15,,,67,,73,,30,,,,,',
',,,10,15,,,67,60,73,59,,,,25,237,,,49,59,,,16,25,70,60,33,49,,,,16,64',
',,33,59,30,78,,25,70,,,49,,30,,16,64,10,15,33,,67,78,73,,,,10,15,,30',
'67,,73,,,,,,60,,,,,,,,,,60,59,,,,25,70,,,49,,59,,16,64,25,70,33,,49',
'78,,,16,64,169,173,33,30,,78,,,,164,166,170,172,30,,,,,,,,169,173,,',
',,,,,164,166,170,172,,,175,176,158,159,161,162,,167,171,,,,,,160,,163',
'165,168,,,175,176,158,159,161,162,,167,171,169,173,,,,160,,163,,164',
'166,170,172,,,,,169,173,,,,,,,,164,166,170,172,,,165,168,,,175,176,158',
'159,161,162,,167,171,,,,,,160,,163,175,176,158,159,161,162,,167,171',
'169,173,,,,160,,163,,164,166,170,172,175,176,158,159,161,162,,167,171',
',173,,,,160,,163,,164,165,168,,,175,176,158,159,161,162,,167,171,169',
'173,,,,160,,163,,164,166,170,172,175,176,158,159,161,162,,167,171,,173',
',,,160,,163,,164,165,168,,,175,176,158,159,161,162,,167,171,169,173',
',,,160,,163,,164,166,170,172,175,176,158,159,161,162,,167,171,,,,,,160',
',163,,,165,168,,,175,176,158,159,161,162,,167,171,169,173,,,,160,,163',
',164,166,170,172,,,,,,169,173,,,,,,,,164,166,170,172,,165,168,,,175',
'176,158,159,161,162,,167,171,,,,,,160,168,163,,175,176,158,159,161,162',
',167,171,169,173,,,,160,,163,,164,166,170,172,,,,,,,,,,,173,,,,,,,,164',
'165,168,,,175,176,158,159,161,162,,167,171,169,173,,,,160,,163,,164',
'166,170,172,175,176,158,159,161,162,,167,171,,,,,,160,,163,,,165,168',
',,175,176,158,159,161,162,,167,171,169,173,,,,160,,163,261,164,166,170',
'172,,,,,169,173,,,,,,,,164,166,170,172,,,165,168,,,175,176,158,159,161',
'162,,167,171,,,,,,160,,163,175,176,158,159,161,162,,167,171,169,173',
',,,160,,163,,164,166,170,172,,,,,,,,,,,,,,,,,,,,165,168,,,175,176,158',
'159,161,162,,167,171,,,,,,160,,163,150,152,155,126,128,,133,136,139',
'223,230,,153,226,,,,,,138,143,225,150,152,155,126,128,,133,136,139,223',
'224,,153,226,,127,130,,,138,143,225,150,152,155,126,128,,133,136,139',
'223,224,,153,226,,127,130,,,138,143,225,150,152,155,126,128,,133,136',
'139,223,224,,153,226,,127,130,,,138,143,225,150,152,155,126,128,,133',
'136,139,223,230,,153,226,,127,130,,,138,143,225,150,152,155,126,128',
',133,136,139,223,230,,153,226,,127,130,,,138,143,225,,,,,,,,,,,,,,,',
'127,130' ]
        racc_action_table = arr = ::Array.new(2508, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,90,90,94,171,324,26,167,26,11,263,263,1,185,90,90,1,263,11,11,197',
'26,197,90,90,90,90,0,94,0,0,171,0,0,167,0,0,0,197,0,0,0,254,254,0,26',
'90,90,0,254,90,90,90,90,90,90,252,90,90,0,324,324,324,324,90,0,90,73',
'73,227,254,70,254,254,73,254,254,69,254,254,254,259,254,254,254,396',
'396,254,306,70,192,254,396,251,69,329,227,227,250,306,192,192,254,329',
'306,73,243,243,254,192,192,192,192,396,325,396,396,325,396,396,243,396',
'396,396,305,396,396,396,393,393,396,248,192,192,396,393,192,192,192',
'192,192,192,146,192,192,396,292,292,305,305,192,396,192,292,183,146',
'393,183,393,393,244,393,393,106,393,393,393,213,393,393,393,29,29,393',
'106,237,249,393,213,106,236,34,230,213,292,34,249,249,393,289,289,229',
'34,222,393,249,249,249,249,29,206,29,29,289,29,29,14,29,29,29,14,29',
'29,29,246,246,29,102,249,249,29,246,249,249,249,249,249,249,102,249',
'249,29,22,102,320,320,249,29,249,199,22,212,246,205,246,246,255,246',
'246,212,246,246,246,156,246,246,246,57,57,246,297,57,154,246,297,262',
'262,297,149,282,267,267,262,147,246,256,256,267,291,256,246,205,291',
'291,205,57,57,57,57,57,57,57,57,57,57,57,376,57,57,376,174,174,57,205',
'57,57,57,174,256,204,178,145,256,256,178,178,256,57,370,370,256,245',
'57,57,256,245,245,286,174,144,174,174,142,174,174,256,174,174,174,140',
'174,174,174,280,280,174,137,204,220,174,204,370,220,220,218,370,370',
'218,218,370,174,379,379,370,135,296,174,370,134,204,129,280,124,280',
'280,123,280,280,370,280,280,280,120,280,280,280,386,386,280,112,312',
'313,280,386,379,110,316,104,379,379,101,89,379,280,247,247,379,322,323',
'280,379,80,79,326,386,76,386,386,75,386,386,379,386,386,386,72,386,386',
'386,353,353,386,335,336,338,386,353,247,341,71,66,247,247,65,59,247',
'386,327,327,247,358,58,386,247,327,53,20,353,363,353,353,50,353,353',
'247,353,353,353,369,353,353,353,302,302,353,47,371,40,353,302,327,375',
'36,32,327,327,380,27,327,353,24,6,327,3,20,353,327,20,399,401,302,,302',
'302,,302,302,327,302,302,302,,302,302,302,117,20,302,,,,302,,,117,117',
'18,18,18,18,,,302,117,117,117,117,,302,268,268,268,268,268,268,,268',
'268,8,8,8,8,,268,,268,117,117,274,,117,117,117,117,117,117,274,117,117',
'63,17,17,17,17,117,,117,,63,63,12,12,12,12,,,,63,63,63,63,,,274,274',
'274,274,274,274,,274,274,52,52,52,52,,274,,274,63,63,,,63,63,63,63,63',
'63,,63,63,118,,,,,63,,63,,118,118,,,,,,,,118,118,118,118,,,266,266,266',
'266,,67,67,266,266,67,67,67,,,266,,266,118,118,,,118,118,118,118,118',
'118,67,118,118,35,35,,,35,118,35,118,67,,,,67,67,,,67,,,,67,67,35,,67',
'39,39,67,,39,,39,,35,,67,,35,35,,,35,373,373,,35,373,39,373,35,,,,,',
',,,39,,35,,39,39,373,,39,,,,39,39,,,39,373,,39,,373,373,,,373,,39,,373',
'373,44,44,373,,44,373,44,,,,201,201,,373,201,,201,,,,182,182,44,,182',
',182,,,,,,201,44,,,,44,44,,,44,182,201,,44,44,201,201,44,,201,44,182',
',201,201,182,182,201,44,182,201,,,182,182,181,181,182,201,181,182,181',
',,,176,176,,182,176,,176,,,,175,175,181,181,175,,175,,,,,,176,181,,',
',181,181,,,181,175,176,,181,181,176,176,181,,176,181,175,,176,176,175',
'175,176,181,175,176,,,175,175,60,60,175,176,60,175,60,,,,260,260,,175',
'260,,260,,,,64,64,60,,64,,64,,,,,,260,60,,,,60,60,,,60,64,260,,60,60',
'260,260,60,,260,60,64,,260,260,64,64,260,60,64,260,,,64,64,173,173,64',
'260,173,64,173,,,,172,172,,64,172,,172,,,,170,170,173,,170,,170,,,,',
',172,173,,,,173,173,,,173,170,172,,173,173,172,172,173,,172,173,170',
',172,172,170,170,172,173,170,172,,,170,170,169,169,170,172,169,170,169',
',,,168,168,,170,168,,168,,,,333,333,169,,333,,333,,,,,,168,169,,,,169',
'169,,,169,333,168,,169,169,168,168,169,,168,169,333,,168,168,333,333',
'168,169,333,168,,,333,333,166,166,333,168,166,333,166,,,,15,15,,333',
'15,,15,,,,9,9,166,,9,,9,,,,,,15,166,,,,166,166,,,166,9,15,,166,166,15',
'15,166,,15,166,9,,15,15,9,9,15,166,9,15,,,9,9,165,165,9,15,165,9,165',
',,,81,81,,9,81,,81,,,,82,82,165,,82,,82,,,,,,81,165,,,,165,165,,,165',
'82,81,,165,165,81,81,165,,81,165,82,,81,81,82,82,81,165,82,81,,,82,82',
'83,83,82,81,83,82,83,,,,85,85,,82,,,,,,,164,164,83,,164,,164,,,,,,,83',
',,,83,83,,,83,164,85,85,83,83,85,85,83,85,85,83,164,,85,,164,164,85',
'83,164,92,92,,164,164,,,164,85,,164,,,163,163,284,284,163,164,163,284',
'284,,,,,,284,,284,,,,92,92,163,,92,92,,92,92,,318,318,92,163,318,,92',
'163,163,,,163,,,,163,163,92,,163,100,100,163,,100,,100,,,,163,,,318',
',,,318,318,,,318,100,,,318,162,162,,318,162,,162,100,,,,100,100,,318',
'100,,,,100,100,,162,100,,,100,,265,265,265,265,,162,100,265,265,162',
'162,,,162,265,,265,162,162,103,103,162,,103,162,103,,,,317,317,,162',
'317,,317,,,,161,161,103,,161,,161,,,,,,317,103,,,,103,103,,,103,161',
'317,,103,103,317,317,103,,317,103,161,,317,317,161,161,317,103,161,317',
',,161,161,160,160,161,317,160,161,160,,,,159,159,,161,159,,159,,,,109',
'109,160,,,,109,,,,283,283,159,160,,283,283,160,160,,,160,283,159,283',
'160,160,159,159,160,,159,160,109,,159,159,109,109,159,160,109,159,,',
'109,,158,158,109,159,158,,158,,,,287,287,,109,287,,287,,,,,,158,,,,',
',,,,,287,158,,,,158,158,,,158,,287,,158,158,287,287,158,,287,158,,,287',
'287,114,114,287,158,114,287,114,,,,115,115,,287,115,115,115,,,,294,294',
'114,114,294,,294,,,,242,242,115,114,242,,,114,114,,,114,294,115,,114',
'114,115,115,114,,115,114,294,,115,115,294,294,115,114,294,115,242,,294',
'294,242,242,294,115,242,294,239,239,242,,,,242,294,,122,122,,,122,,122',
',242,,,,,,,,,304,304,,,304,122,304,239,,,,239,239,,,239,122,,,239,122',
'122,304,239,122,,,,122,122,,,122,304,239,122,,304,304,,,304,,122,,304',
'304,303,303,304,,303,304,303,,,,78,78,,304,78,,78,,,,,,303,,,,,,,,,',
'78,303,,,,303,303,,,303,,78,,303,303,78,78,303,,78,303,,,78,78,359,359',
'78,303,,78,,,,359,359,359,359,78,,,,,,,,191,191,,,,,,,,191,191,191,191',
',,359,359,359,359,359,359,,359,359,,,,,,359,,359,191,191,,,191,191,191',
'191,191,191,,191,191,190,190,,,,191,,191,,190,190,190,190,,,,,360,360',
',,,,,,,360,360,360,360,,,190,190,,,190,190,190,190,190,190,,190,190',
',,,,,190,,190,360,360,360,360,360,360,,360,360,381,381,,,,360,,360,',
'381,381,381,381,279,279,279,279,279,279,,279,279,,270,,,,279,,279,,270',
'381,381,,,381,381,381,381,381,381,,381,381,179,179,,,,381,,381,,179',
'179,179,179,270,270,270,270,270,270,,270,270,,278,,,,270,,270,,278,179',
'179,,,179,179,179,179,179,179,,179,179,367,367,,,,179,,179,,367,367',
'367,367,278,278,278,278,278,278,,278,278,,,,,,278,,278,,,367,367,,,367',
'367,367,367,367,367,,367,367,208,208,,,,367,,367,,208,208,208,208,,',
',,,269,269,,,,,,,,269,269,269,269,,208,208,,,208,208,208,208,208,208',
',208,208,,,,,,208,269,208,,269,269,269,269,269,269,,269,269,352,352',
',,,269,,269,,352,352,352,352,,,,,,,,,,,275,,,,,,,,275,352,352,,,352',
'352,352,352,352,352,,352,352,347,347,,,,352,,352,,347,347,347,347,275',
'275,275,275,275,275,,275,275,,,,,,275,,275,,,347,347,,,347,347,347,347',
'347,347,,347,347,157,157,,,,347,,347,157,157,157,157,157,,,,,273,273',
',,,,,,,273,273,273,273,,,157,157,,,157,157,157,157,157,157,,157,157',
',,,,,157,,157,273,273,273,273,273,273,,273,273,344,344,,,,273,,273,',
'344,344,344,344,,,,,,,,,,,,,,,,,,,,344,344,,,344,344,344,344,344,344',
',344,344,,,,,,344,,344,107,107,107,107,107,,107,107,107,107,107,,107',
'107,,,,,,107,107,107,258,258,258,258,258,,258,258,258,258,258,,258,258',
',107,107,,,258,258,258,257,257,257,257,257,,257,257,257,257,257,,257',
'257,,258,258,,,257,257,257,105,105,105,105,105,,105,105,105,105,105',
',105,105,,257,257,,,105,105,105,221,221,221,221,221,,221,221,221,221',
'221,,221,221,,105,105,,,221,221,221,315,315,315,315,315,,315,315,315',
'315,315,,315,315,,221,221,,,315,315,315,,,,,,,,,,,,,,,,315,315' ]
        racc_action_check = arr = ::Array.new(2508, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   -23,   nil,   450,   nil,   nil,   484,   nil,   486,  1120,
   nil,     4,   518,   nil,   171,  1110,   nil,   508,   464,   nil,
   455,   nil,   218,   nil,   491,   nil,     1,   480,   nil,   170,
   nil,   nil,   461,   nil,   146,   676,   460,   nil,   nil,   701,
   455,   nil,   nil,   nil,   765,   nil,   nil,   474,   nil,   nil,
   456,   nil,   540,   432,   nil,   nil,   nil,   256,   429,   439,
   899,   nil,   nil,   562,   919,   421,   418,   651,   nil,    72,
    66,   417,   403,    66,   nil,   396,   393,   nil,  1779,   390,
   406,  1177,  1187,  1234,   nil,  1244,   nil,   nil,   nil,   378,
    -2,   nil,  1296,   nil,    -8,   nil,   nil,   nil,   nil,   nil,
  1359,   401,   194,  1432,   390,  2395,   140,  2329,   nil,  1519,
   388,   nil,   378,   nil,  1623,  1633,   nil,   508,   616,   nil,
   371,   nil,  1705,   341,   365,   nil,   nil,   nil,   nil,   330,
   nil,   nil,   nil,   nil,   349,   353,   nil,   324,   nil,   nil,
   317,   nil,   310,   nil,   319,   289,   132,   251,   nil,   246,
   nil,   nil,   nil,   nil,   257,   nil,   231,  2227,  1566,  1509,
  1499,  1452,  1385,  1309,  1254,  1167,  1100,   -27,  1043,  1033,
   986,   -30,   976,   966,   299,   852,   842,   nil,   304,  1984,
   nil,   832,   785,   146,   nil,     3,   nil,   nil,   nil,   nil,
  1877,  1832,    84,   nil,   nil,   nil,   nil,    15,   nil,   203,
   nil,   775,   nil,   nil,   308,   242,   193,   nil,  2074,   nil,
   nil,   nil,   224,   144,   nil,   nil,   nil,   nil,   309,   nil,
   342,  2417,   182,   nil,   nil,   nil,   nil,    48,   nil,   180,
   131,   nil,   nil,   nil,   nil,   nil,   170,   152,   nil,  1696,
   nil,   nil,  1653,    96,   138,   315,   213,   403,   130,   170,
    84,    69,    45,   nil,    41,   238,   274,  2373,  2351,    73,
   909,   nil,   206,   -49,   nil,  1362,   595,   211,   487,  2092,
  1961,   nil,   nil,  2244,   541,  2159,   nil,   nil,  2006,  1916,
   342,   nil,   261,  1476,  1258,   nil,   321,  1576,   nil,   179,
   nil,   272,   145,   nil,  1643,   nil,   358,   225,   nil,   nil,
   nil,   nil,   471,  1769,  1722,   100,    65,   nil,   nil,   nil,
   nil,   nil,   379,   383,   nil,  2439,   388,  1442,  1339,   nil,
   224,   nil,   383,   386,    -2,    84,   405,   446,   nil,    84,
   nil,   nil,   nil,  1053,   nil,   398,   409,   nil,   426,   nil,
   nil,   427,   nil,   nil,  2289,   nil,   nil,  2182,   nil,   nil,
   nil,   nil,  2137,   428,   nil,   nil,   nil,   nil,   442,  1811,
  1894,   nil,   nil,   450,   nil,   nil,   nil,  2029,   nil,   460,
   317,   468,   nil,   718,   nil,   474,   266,   nil,   nil,   360,
   479,  1939,   nil,   nil,   nil,   nil,   385,   nil,   nil,   nil,
   nil,   nil,   nil,   127,   nil,   nil,    84,   nil,   nil,   490,
   nil,   491,   nil,   nil ]

racc_action_default = [
  -209,  -244,  -186,   -75,   -18,    -7,  -244,   -19,    -8,  -244,
  -125,  -224,   -20,    -9,  -201,  -244,   -99,   -10,  -244,   -11,
  -244,  -180,  -242,   -12,  -244,  -130,  -181,   -39,   -13,    -1,
  -232,  -185,  -244,   -97,  -244,   -98,   -41,   -14,    -2,  -244,
   -42,   -15,    -3,  -184,  -244,   -43,   -16,  -244,  -189,  -188,
   -45,   -17,    -6,  -209,  -201,  -200,   -76,  -110,   -69,  -224,
  -244,  -142,  -143,  -244,  -244,  -242,   -59,  -244,   -66,   -60,
   -98,   -63,   -61,  -244,   -64,   -58,   -67,   -62,  -244,   -68,
   -65,  -244,  -244,  -244,   -49,  -244,   -46,   -47,   -48,  -209,
  -244,  -126,  -244,  -206,  -209,  -202,  -205,  -204,  -208,  -207,
  -244,  -244,  -209,  -244,   -78,  -110,  -209,  -120,    -4,  -244,
  -244,   -74,   -53,   -54,  -244,  -244,  -135,  -244,  -244,  -191,
  -193,  -190,  -244,  -210,  -244,  -211,   -25,   -29,   -27,   -95,
   -35,  -114,   -93,   -23,  -244,  -230,   -31,  -101,   -33,   -32,
  -115,  -111,  -102,   -21,  -244,  -104,   -98,   -34,  -105,  -100,
   -28,  -103,   -26,   -22,  -106,   -30,   -24,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -163,  -244,   -56,
  -227,  -244,  -244,  -244,  -236,  -244,  -239,  -240,  -235,  -156,
  -107,  -109,  -244,   -40,   -44,   -37,   -39,   -98,   -38,  -209,
  -127,  -244,  -128,   -36,  -244,  -244,  -244,  -218,  -108,   404,
   -84,  -224,  -244,  -209,   -91,   -98,   -90,   -81,  -244,   -82,
  -244,  -120,  -230,  -115,  -113,   -34,   -24,  -244,  -118,  -230,
  -113,  -119,  -121,  -187,  -181,  -183,  -244,   -98,  -182,  -244,
  -174,  -175,  -244,  -244,   -52,  -244,  -244,  -244,  -244,  -244,
  -217,  -244,  -230,  -214,  -244,  -244,   -96,  -110,  -231,  -244,
  -244,  -166,  -152,  -151,  -144,  -154,  -155,  -153,  -158,  -165,
  -160,  -146,  -145,  -164,  -162,  -159,  -148,  -147,  -161,  -157,
    -5,  -134,  -244,  -149,  -150,  -228,  -229,  -244,  -225,  -244,
  -124,  -244,  -244,  -233,  -244,  -241,  -244,  -244,  -220,  -129,
  -203,  -219,  -244,  -244,  -244,  -244,  -244,   -79,   -87,   -86,
  -229,  -132,  -230,  -244,   -80,  -231,  -244,  -244,  -244,  -177,
  -230,   -55,  -229,   -50,  -225,  -138,  -244,  -244,  -168,  -244,
  -172,  -192,  -243,  -244,  -212,  -231,  -244,  -195,  -244,   -70,
   -94,  -230,  -112,   -71,  -116,  -133,  -226,   -57,  -123,  -131,
  -237,  -234,  -238,  -244,  -221,  -222,  -223,  -199,  -244,   -88,
   -89,   -85,   -83,  -244,   -72,  -122,   -73,  -117,  -179,  -229,
  -244,  -244,   -51,  -244,  -137,  -244,  -138,  -169,  -167,  -244,
  -244,  -216,  -215,  -213,  -194,   -92,  -244,  -197,  -198,   -77,
  -178,  -176,  -139,  -244,  -136,  -173,  -244,  -196,  -141,  -244,
  -171,  -244,  -140,  -170 ]

racc_goto_table = [
    21,   241,    29,   116,   184,    26,   282,   113,    53,   253,
   119,    22,   236,   259,   228,    91,   135,   108,   148,    38,
    50,    89,   229,   328,    95,   111,   218,   132,   374,    21,
   227,   124,    31,   320,    26,   195,   193,   194,   327,   110,
    22,    45,   203,   193,   194,    85,   178,   200,   370,    50,
   240,    92,   365,   112,   129,    27,   120,   137,   255,   296,
    94,    31,   142,   206,   222,   104,   301,   199,   251,   252,
    45,   362,   125,   354,   183,    24,   198,   154,   326,   394,
   nil,   nil,   220,   198,    27,    21,   338,   nil,   nil,    31,
    26,   nil,    21,   243,   245,   nil,   nil,    26,   151,   nil,
   313,   nil,   214,   377,   nil,    50,   214,   316,   125,    21,
   nil,   nil,    50,   207,   234,    43,   nil,    31,   nil,   nil,
   233,   nil,   nil,   nil,    31,   nil,    45,   nil,   228,   nil,
   336,   319,   nil,    45,   358,   nil,   312,   305,   nil,   nil,
   196,    31,   236,   nil,    43,   nil,   nil,   196,   nil,   nil,
   330,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   289,   291,   nil,   nil,   nil,   342,   nil,   nil,   nil,   nil,
   nil,   nil,    43,   nil,    21,     2,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   363,   nil,   nil,   nil,    50,   nil,   nil,   nil,   371,   nil,
    43,   299,   nil,   nil,     2,   nil,    31,    43,   300,   nil,
   nil,   331,   nil,   214,   321,    45,   341,   148,   298,   385,
   nil,   382,   228,   350,    43,   399,   340,   nil,   401,    27,
   330,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   234,   nil,    21,    21,   nil,   nil,
   233,    26,   234,   nil,    21,   nil,   137,    22,   233,    26,
     2,   142,   390,   nil,   nil,    22,    50,     2,   108,   nil,
   nil,    31,   nil,   236,    50,   nil,   154,   nil,    31,    31,
    21,   nil,   395,   nil,     2,    26,    31,    45,    31,    43,
   368,    22,   nil,   nil,   nil,    45,   nil,   151,   nil,   nil,
    50,    27,    21,   nil,   355,   nil,   214,    26,   nil,    27,
   nil,   nil,    31,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    50,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   234,   nil,    31,    27,   nil,   392,   233,   nil,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,    48,     2,
   nil,   nil,   nil,    21,    43,   386,   nil,    27,    26,    31,
   nil,    43,    43,   nil,    22,   nil,   nil,   nil,    98,    43,
    21,    43,   nil,    50,   108,   234,   nil,    48,   nil,    21,
   nil,   233,   nil,   nil,   234,    31,    21,   nil,   nil,   nil,
   233,    26,   nil,    21,    45,    43,    21,    22,    26,   nil,
   nil,    26,    31,   nil,    22,    48,    50,    22,    27,   nil,
   nil,    31,   nil,    50,     2,    40,    50,    43,    31,   nil,
   nil,     2,     2,   nil,   nil,    31,   nil,    45,    31,     2,
   nil,     2,   nil,    48,    45,   nil,   nil,    45,   nil,   nil,
    48,    27,    43,   nil,    40,   nil,   nil,   nil,    27,   nil,
   nil,    27,   nil,   nil,   nil,     2,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,
   nil,   nil,   149,   nil,   nil,    36,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,   187,   nil,
   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,
    40,    43,     2,   nil,    36,   nil,   nil,    40,    43,   nil,
   nil,    43,   nil,   nil,   nil,   272,   nil,   nil,   nil,   277,
   nil,   nil,    48,   nil,   238,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,    98,    98,     2,   nil,   nil,   nil,   nil,   nil,
    36,     2,   nil,   nil,   nil,   nil,   nil,    36,     2,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   216,   nil,   nil,
   nil,   216,   nil,   nil,   235,   nil,   nil,    48,   nil,    40,
   nil,   nil,   nil,   nil,    48,    48,   nil,   nil,   nil,   nil,
   nil,   nil,    48,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   271,   nil,   nil,   nil,   276,   nil,   nil,    36,
    48,   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,   nil,
   nil,    40,   238,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   149,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   216,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   nil,   nil,   nil,   nil,   187,   nil,   nil,
   nil,   nil,   nil,   nil,   235,   nil,   nil,    40,    48,   nil,
   nil,    36,   235,   nil,    63,   nil,   nil,    48,   nil,    36,
    90,   145,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   238,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   117,    36,   nil,   nil,   nil,   118,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   157,   nil,    36,   nil,   177,
   nil,   216,   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   189,   238,   nil,   190,   191,   192,   nil,
   nil,    40,   235,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,    40,   nil,   nil,   nil,   208,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   249,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   235,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   235,   nil,   nil,   nil,   nil,   nil,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,
   nil,    36,   nil,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   nil,   273,   274,   275,   nil,   278,   279,   nil,
   283,   284,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    90,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   344,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   347,   nil,   nil,   nil,   nil,   nil,   nil,   352,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   359,   360,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   367,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   381,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   117 ]

racc_goto_check = [
    34,    71,     2,    63,    86,    35,     5,    31,    41,    83,
    73,    56,    69,    45,    57,    61,    44,     4,    37,     3,
    28,    41,    46,    67,    79,     6,    49,    54,    64,    34,
    49,    75,    36,    72,    35,    22,     8,    10,    66,    35,
    56,    27,    22,     8,    10,    23,    29,    62,    33,    28,
    70,    23,    60,    30,    42,    24,    74,    34,    43,    76,
    77,    36,    35,    78,    44,    48,    80,    75,    81,    82,
    27,    50,     3,    84,    85,     1,     6,    28,     5,    64,
   nil,   nil,    29,     6,    24,    34,     5,   nil,   nil,    36,
    35,   nil,    34,    29,    29,   nil,   nil,    35,    27,   nil,
    45,   nil,    34,    67,   nil,    28,    34,    45,     3,    34,
   nil,   nil,    28,     3,    35,    38,   nil,    36,   nil,   nil,
    56,   nil,   nil,   nil,    36,   nil,    27,   nil,    57,   nil,
    45,    71,   nil,    27,     5,   nil,    46,    49,   nil,   nil,
    24,    36,    69,   nil,    38,   nil,   nil,    24,   nil,   nil,
    69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,    29,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,
   nil,   nil,    38,   nil,    34,    40,   nil,   nil,   nil,    35,
   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,   nil,
    45,   nil,   nil,   nil,    28,   nil,   nil,   nil,    45,   nil,
    38,    61,   nil,   nil,    40,   nil,    36,    38,    79,   nil,
   nil,    73,   nil,    34,    31,    27,    44,    37,     3,    45,
   nil,    83,    57,    86,    38,     5,    54,   nil,     5,    24,
    69,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,    34,
   nil,   nil,   nil,   nil,    35,   nil,    34,    34,   nil,   nil,
    56,    35,    35,   nil,    34,   nil,    34,    56,    56,    35,
    40,    35,    71,   nil,   nil,    56,    28,    40,     4,   nil,
   nil,    36,   nil,    69,    28,   nil,    28,   nil,    36,    36,
    34,   nil,    69,   nil,    40,    35,    36,    27,    36,    38,
    31,    56,   nil,   nil,   nil,    27,   nil,    27,   nil,   nil,
    28,    24,    34,   nil,    41,   nil,    34,    35,   nil,    24,
   nil,   nil,    36,    56,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    28,   nil,   nil,   nil,   nil,    34,   nil,   nil,
   nil,   nil,    35,   nil,    36,    24,   nil,    63,    56,   nil,
   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,    39,    40,
   nil,   nil,   nil,    34,    38,     2,   nil,    24,    35,    36,
   nil,    38,    38,   nil,    56,   nil,   nil,   nil,    39,    38,
    34,    38,   nil,    28,     4,    35,   nil,    39,   nil,    34,
   nil,    56,   nil,   nil,    35,    36,    34,   nil,   nil,   nil,
    56,    35,   nil,    34,    27,    38,    34,    56,    35,   nil,
   nil,    35,    36,   nil,    56,    39,    28,    56,    24,   nil,
   nil,    36,   nil,    28,    40,    26,    28,    38,    36,   nil,
   nil,    40,    40,   nil,   nil,    36,   nil,    27,    36,    40,
   nil,    40,   nil,    39,    27,   nil,   nil,    27,   nil,   nil,
    39,    24,    38,   nil,    26,   nil,   nil,   nil,    24,   nil,
   nil,    24,   nil,   nil,   nil,    40,   nil,    39,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,
   nil,   nil,    26,   nil,   nil,    25,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,
    26,    38,    40,   nil,    25,   nil,   nil,    26,    38,   nil,
   nil,    38,   nil,   nil,   nil,    39,   nil,   nil,   nil,    39,
   nil,   nil,    39,   nil,    26,   nil,   nil,   nil,    40,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,    39,    39,    40,   nil,   nil,   nil,   nil,   nil,
    25,    40,   nil,   nil,   nil,   nil,   nil,    25,    40,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,    25,   nil,   nil,    25,   nil,   nil,    39,   nil,    26,
   nil,   nil,   nil,   nil,    39,    39,   nil,   nil,   nil,   nil,
   nil,   nil,    39,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,    25,   nil,   nil,    25,
    39,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,    26,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,    26,    39,   nil,
   nil,    25,    25,   nil,    32,   nil,   nil,    39,   nil,    25,
    32,    25,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,    39,    26,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,    25,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,    25,   nil,    32,
   nil,    25,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,    26,   nil,    32,    32,    32,   nil,
   nil,    26,    25,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,    26,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,    25,   nil,    32,    32,    32,    32,    32,    32,    32,
    32,    32,   nil,    32,    32,    32,   nil,    32,    32,   nil,
    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    75,     2,    19,   -12,  -168,    -9,   nil,   -49,   nil,
   -48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -50,    33,    55,   475,   415,    41,    20,   -21,
    18,   -28,   715,  -272,     0,     5,    32,   -39,   115,   348,
   175,     7,    -3,   -71,   -41,  -122,   -85,   nil,    39,   -76,
  -235,   nil,   nil,   nil,   -30,   nil,    11,   -93,   nil,   nil,
  -263,     0,   -43,   -36,  -297,   nil,  -209,  -224,   nil,   -97,
   -59,  -108,  -206,   -37,     9,   -22,  -140,    40,   -31,     4,
  -139,   -55,   -54,  -114,  -224,     1,   -69,   nil ]

racc_goto_default = [
   nil,   nil,   280,   217,    42,   nil,    52,     5,     8,    13,
    17,    19,    23,    28,    37,    41,    46,    51,     4,     7,
    12,   131,    18,   nil,    68,    71,    75,    77,    80,   nil,
   nil,    61,   179,   287,    66,    69,    72,    74,    76,    79,
    58,     6,   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,
   219,   306,   210,   212,   nil,   134,    65,   141,   144,   231,
   232,   nil,   nil,   nil,   nil,    62,   nil,   nil,   329,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   185 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 72, :_reduce_3,
  2, 72, :_reduce_4,
  1, 75, :_reduce_5,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 90, :_reduce_36,
  3, 90, :_reduce_37,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  4, 84, :_reduce_50,
  5, 84, :_reduce_51,
  3, 84, :_reduce_52,
  2, 84, :_reduce_53,
  1, 100, :_reduce_54,
  3, 100, :_reduce_55,
  1, 99, :_reduce_56,
  3, 99, :_reduce_57,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  5, 76, :_reduce_70,
  5, 76, :_reduce_71,
  5, 76, :_reduce_72,
  5, 88, :_reduce_73,
  2, 77, :_reduce_74,
  1, 117, :_reduce_75,
  2, 117, :_reduce_76,
  6, 78, :_reduce_77,
  2, 78, :_reduce_78,
  3, 118, :_reduce_79,
  3, 118, :_reduce_80,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  3, 119, :_reduce_83,
  1, 120, :_reduce_none,
  3, 120, :_reduce_85,
  1, 121, :_reduce_86,
  1, 121, :_reduce_87,
  3, 122, :_reduce_88,
  3, 122, :_reduce_89,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  4, 124, :_reduce_92,
  1, 112, :_reduce_93,
  3, 112, :_reduce_94,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 110, :_reduce_97,
  1, 104, :_reduce_98,
  1, 105, :_reduce_99,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  3, 79, :_reduce_107,
  3, 79, :_reduce_108,
  3, 89, :_reduce_109,
  0, 114, :_reduce_110,
  1, 114, :_reduce_111,
  3, 114, :_reduce_112,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 127, :_reduce_116,
  3, 129, :_reduce_117,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  0, 116, :_reduce_120,
  1, 116, :_reduce_121,
  3, 116, :_reduce_122,
  4, 108, :_reduce_123,
  3, 108, :_reduce_124,
  1, 96, :_reduce_125,
  2, 96, :_reduce_126,
  2, 131, :_reduce_127,
  1, 132, :_reduce_128,
  2, 132, :_reduce_129,
  1, 106, :_reduce_130,
  4, 94, :_reduce_131,
  4, 94, :_reduce_132,
  5, 82, :_reduce_133,
  4, 82, :_reduce_134,
  2, 81, :_reduce_135,
  5, 133, :_reduce_136,
  4, 133, :_reduce_137,
  0, 134, :_reduce_none,
  2, 134, :_reduce_139,
  4, 134, :_reduce_140,
  3, 134, :_reduce_141,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_144,
  3, 102, :_reduce_145,
  3, 102, :_reduce_146,
  3, 102, :_reduce_147,
  3, 102, :_reduce_148,
  3, 102, :_reduce_149,
  3, 102, :_reduce_150,
  3, 102, :_reduce_151,
  3, 102, :_reduce_152,
  3, 102, :_reduce_153,
  3, 102, :_reduce_154,
  3, 102, :_reduce_155,
  2, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158,
  3, 102, :_reduce_159,
  3, 102, :_reduce_160,
  3, 102, :_reduce_161,
  3, 102, :_reduce_162,
  2, 102, :_reduce_163,
  3, 102, :_reduce_164,
  3, 102, :_reduce_165,
  3, 102, :_reduce_166,
  5, 80, :_reduce_167,
  1, 136, :_reduce_168,
  2, 136, :_reduce_169,
  5, 137, :_reduce_170,
  4, 137, :_reduce_171,
  1, 138, :_reduce_172,
  3, 138, :_reduce_173,
  3, 97, :_reduce_174,
  1, 140, :_reduce_none,
  4, 140, :_reduce_176,
  1, 142, :_reduce_none,
  3, 142, :_reduce_178,
  3, 141, :_reduce_179,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_188,
  1, 139, :_reduce_none,
  1, 143, :_reduce_190,
  1, 144, :_reduce_none,
  3, 144, :_reduce_192,
  2, 83, :_reduce_193,
  6, 85, :_reduce_194,
  5, 85, :_reduce_195,
  7, 86, :_reduce_196,
  6, 86, :_reduce_197,
  6, 87, :_reduce_198,
  5, 87, :_reduce_199,
  1, 111, :_reduce_200,
  1, 111, :_reduce_201,
  1, 147, :_reduce_202,
  3, 147, :_reduce_203,
  1, 149, :_reduce_204,
  1, 150, :_reduce_205,
  1, 150, :_reduce_206,
  1, 150, :_reduce_207,
  1, 150, :_reduce_none,
  0, 73, :_reduce_209,
  0, 151, :_reduce_210,
  1, 145, :_reduce_none,
  3, 145, :_reduce_212,
  4, 145, :_reduce_213,
  1, 152, :_reduce_none,
  3, 152, :_reduce_215,
  3, 153, :_reduce_216,
  1, 153, :_reduce_217,
  1, 148, :_reduce_none,
  2, 148, :_reduce_219,
  1, 146, :_reduce_none,
  2, 146, :_reduce_221,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 95, :_reduce_224,
  3, 107, :_reduce_225,
  4, 107, :_reduce_226,
  2, 107, :_reduce_227,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  0, 115, :_reduce_none,
  1, 115, :_reduce_231,
  1, 109, :_reduce_232,
  3, 135, :_reduce_233,
  4, 135, :_reduce_234,
  2, 135, :_reduce_235,
  1, 155, :_reduce_none,
  3, 155, :_reduce_237,
  3, 156, :_reduce_238,
  1, 157, :_reduce_239,
  1, 157, :_reduce_240,
  4, 126, :_reduce_241,
  1, 98, :_reduce_none,
  4, 98, :_reduce_243 ]

racc_reduce_n = 244

racc_shift_n = 404

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "regex",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::BlockExpression, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'grammar.ra', 158)
  def _reduce_70(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_71(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 164)
  def _reduce_72(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 171)
  def _reduce_73(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_74(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 195)
  def _reduce_76(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_77(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_78(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 236)
  def _reduce_79(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_80(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_83(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'grammar.ra', 262)
  def _reduce_85(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_87(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 270)
  def _reduce_88(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 275)
  def _reduce_89(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 284)
  def _reduce_92(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_93(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 289)
  def _reduce_94(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'grammar.ra', 297)
  def _reduce_97(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 301)
  def _reduce_98(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_99(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_107(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 323)
  def _reduce_108(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 327)
  def _reduce_109(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 333)
  def _reduce_110(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 335)
  def _reduce_111(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_112(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 350)
  def _reduce_117(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_120(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_121(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_122(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 369)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_124(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_126(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 383)
  def _reduce_127(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_129(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 389)
  def _reduce_130(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 393)
  def _reduce_131(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 396)
  def _reduce_132(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 400)
  def _reduce_133(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 409)
  def _reduce_134(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 418)
  def _reduce_135(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 422)
  def _reduce_136(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 433)
  def _reduce_137(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'grammar.ra', 446)
  def _reduce_139(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 449)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 453)
  def _reduce_141(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_144(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_146(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_147(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_148(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_153(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_154(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_155(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_156(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 514)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 517)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 520)
  def _reduce_160(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 523)
  def _reduce_161(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_162(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_163(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 532)
  def _reduce_164(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_165(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_166(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 542)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_168(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 548)
  def _reduce_169(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 553)
  def _reduce_170(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 556)
  def _reduce_171(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::BlockExpression)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_172(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 568)
  def _reduce_173(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 573)
  def _reduce_174(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 175 omitted

module_eval(<<'.,.,', 'grammar.ra', 578)
  def _reduce_176(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 177 omitted

module_eval(<<'.,.,', 'grammar.ra', 584)
  def _reduce_178(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 593)
  def _reduce_179(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_188(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 189 omitted

module_eval(<<'.,.,', 'grammar.ra', 610)
  def _reduce_190(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 191 omitted

module_eval(<<'.,.,', 'grammar.ra', 612)
  def _reduce_192(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 615)
  def _reduce_193(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 625)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 633)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_197(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 657)
  def _reduce_198(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_199(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_200(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 667)
  def _reduce_201(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 672)
  def _reduce_202(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_203(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 680)
  def _reduce_204(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_205(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 684)
  def _reduce_206(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 685)
  def _reduce_207(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_209(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_210(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_212(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 701)
  def _reduce_213(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 214 omitted

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_215(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_216(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_217(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'grammar.ra', 718)
  def _reduce_219(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_221(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'grammar.ra', 729)
  def _reduce_224(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 732)
  def _reduce_225(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_226(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_227(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_231(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 743)
  def _reduce_232(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_233(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 754)
  def _reduce_234(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 760)
  def _reduce_235(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 236 omitted

module_eval(<<'.,.,', 'grammar.ra', 765)
  def _reduce_237(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 774)
  def _reduce_238(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 777)
  def _reduce_239(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_240(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 781)
  def _reduce_241(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 242 omitted

module_eval(<<'.,.,', 'grammar.ra', 786)
  def _reduce_243(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
